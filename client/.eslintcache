[{"D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\index.js":"1","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\App.js":"2","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\ApolloProvider.js":"3","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\ErrorFallBack.js":"4","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\util\\AuthRoute.js":"5","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\About.js":"6","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\context\\auth.js":"7","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\Home.js":"8","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\Login.js":"9","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\Register.js":"10","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\components\\SnackBar.js":"11","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\Profile.js":"12","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\components\\MenuBar.js":"13","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\chat\\ChatLobby.js":"14","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\chat\\Chat.js":"15","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\chat\\ChatProfile.js":"16","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\util\\hooks.js":"17","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\components\\ChatPrizeProgress.js":"18","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\components\\ChatLeaderBoard.js":"19","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\util\\ChatValidations.js":"20","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\chat\\RegisterProfile.js":"21","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\chat\\CheckProfileItem.js":"22","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\util\\CheckIsDirect.js":"23"},{"size":305,"mtime":1609318544000,"results":"24","hashOfConfig":"25"},{"size":1848,"mtime":1649969417474,"results":"26","hashOfConfig":"25"},{"size":2480,"mtime":1674847396567,"results":"27","hashOfConfig":"25"},{"size":1207,"mtime":1609318544000,"results":"28","hashOfConfig":"25"},{"size":447,"mtime":1609318544000,"results":"29","hashOfConfig":"25"},{"size":12918,"mtime":1649975096504,"results":"30","hashOfConfig":"25"},{"size":1465,"mtime":1646151291945,"results":"31","hashOfConfig":"25"},{"size":3088,"mtime":1674583509609,"results":"32","hashOfConfig":"25"},{"size":4029,"mtime":1609318544000,"results":"33","hashOfConfig":"25"},{"size":4388,"mtime":1631849080000,"results":"34","hashOfConfig":"25"},{"size":2119,"mtime":1609318544000,"results":"35","hashOfConfig":"25"},{"size":5980,"mtime":1646232668449,"results":"36","hashOfConfig":"25"},{"size":2519,"mtime":1649969506583,"results":"37","hashOfConfig":"25"},{"size":10175,"mtime":1645806947719,"results":"38","hashOfConfig":"25"},{"size":22017,"mtime":1674581216382,"results":"39","hashOfConfig":"25"},{"size":10480,"mtime":1645806975478,"results":"40","hashOfConfig":"25"},{"size":721,"mtime":1609318544000,"results":"41","hashOfConfig":"25"},{"size":3892,"mtime":1609318544000,"results":"42","hashOfConfig":"25"},{"size":1966,"mtime":1645357472217,"results":"43","hashOfConfig":"25"},{"size":9135,"mtime":1650309984827,"results":"44","hashOfConfig":"25"},{"size":24355,"mtime":1650023623952,"results":"45","hashOfConfig":"25"},{"size":8456,"mtime":1650021946959,"results":"46","hashOfConfig":"25"},{"size":2136,"mtime":1651917385259,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"123rnmm",{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":42,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"50"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"50"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\index.js",[],["109","110"],"D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\App.js",["111","112"],"import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { Container } from \"semantic-ui-react\";\r\n\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"./App.css\";\r\n\r\nimport { AuthProvider } from \"./context/auth\";\r\nimport AuthRoute from \"./util/AuthRoute\";\r\n\r\nimport { ErrorBoundary } from \"react-error-boundary\";\r\nimport ErrorFallBackPage from \"./pages/ErrorFallBack\";\r\nimport MenuBar from \"./components/MenuBar\";\r\nimport Home from \"./pages/Home\";\r\nimport About from \"./pages/About\";\r\nimport Profile from \"./pages/Profile\";\r\nimport Login from \"./pages/Login\";\r\nimport Chat from \"./pages/chat/Chat\";\r\nimport ChatLobby from \"./pages/chat/ChatLobby\";\r\nimport ChatProfile from \"./pages/chat/ChatProfile\";\r\nimport Register from \"./pages/Register\";\r\nimport { SnackBar } from \"./components/SnackBar\";\r\n\r\nfunction App() {\r\n  return (\r\n    <AuthProvider>\r\n      {/* <ErrorBoundary FallbackComponent={ErrorFallBackPage}> */}\r\n\r\n      <Router>\r\n        <Container>\r\n          <Switch>\r\n            <Route component={Profile} path=\"/profile\" />\r\n            <Route component={About} path=\"/help\" />\r\n            <AuthRoute component={Register} path=\"/register\" />\r\n            <AuthRoute component={Login} path=\"/login\" />\r\n            <Route component={ChatLobby} path=\"/chatlobby\" />\r\n\t\t\t<Route component={ChatProfile} path=\"/chatprofile\" />\r\n            <Route\r\n              exact\r\n              path=\"/chat\"\r\n              render={(otherUser) => {\r\n                return <Chat otherUser={otherUser} />;\r\n              }}\r\n            />\r\n\r\n            <Route component={ErrorFallBackPage} path=\"/error\" />\r\n            <Route component={Home} path=\"/\" />\r\n          </Switch>\r\n\r\n          <SnackBar />\r\n        </Container>\r\n      </Router>\r\n      {/* </ErrorBoundary> */}\r\n    </AuthProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\ApolloProvider.js",[],"D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\ErrorFallBack.js",["113","114","115"],"import React, { useEffect, useRef, useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Button, Modal } from 'semantic-ui-react'\r\nconst ErrorFallBackPage = (props) => {\r\n  const history = useHistory()\r\n  const onOk = () => {\r\n    history.push('/')\r\n    window.location.reload()\r\n  }\r\n\r\n  return (\r\n    <Modal onClose={onOk} open={true}>\r\n      <Modal.Header>\r\n        <p className=\"modal-text\">خطای اتّصال</p>\r\n      </Modal.Header>\r\n      <Modal.Content>\r\n        <Modal.Description>\r\n          <p className=\"modal-text\">در اتّصال شما با سرور خطایی رخ داد.</p>\r\n          <p className=\"modal-text\">\r\n            از اتصال خود به اینترنت مطمئن شوید و پوزش ما را پذیرا باشید\r\n          </p>\r\n        </Modal.Description>\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button\r\n          content=\"برو به صفحه اصلی\"\r\n          labelPosition=\"right\"\r\n          icon=\"checkmark\"\r\n          color=\"blue\"\r\n          className=\"modal-button\"\r\n          onClick={onOk}\r\n          primary\r\n        />\r\n      </Modal.Actions>\r\n    </Modal>\r\n  )\r\n}\r\nexport default ErrorFallBackPage\r\n","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\util\\AuthRoute.js",[],"D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\About.js",["116","117","118","119","120","121","122"],"import MenuBar from \"../components/MenuBar\";\r\nimport \"./About.css\";\r\nimport enterImg from './about_images/enter.PNG';\r\nimport menuImg from './about_images/menu.PNG';\r\nimport menuImg2 from './about_images/menu2.PNG';\r\nimport selectImg from './about_images/select.PNG';\r\nimport mychatsImg from './about_images/mychats.PNG';\r\nimport rulesImg from './about_images/chat_rules.PNG';\r\nimport chatImg from './about_images/chat.PNG';\r\n\r\nfunction About() {\r\n\r\n  return (\r\n    <>\r\n      <MenuBar />\r\n      <div className=\"help-container\">\r\n          <h1 className=\"page-title\">راهنمای جامع شرکت در مسابقه</h1>\r\n          <div class=\"nav\">\r\n            <a href=\"#goal\" class=\"nav-elem\">هدف</a>\r\n            <a href=\"#generalProc\" class=\"nav-elem\">روند کلی مسابقه</a>\r\n            <a href=\"#rules\" class=\"nav-elem\">قوانین چت</a>\r\n            <a href=\"#scoring\" class=\"nav-elem\">نحوۀ امتیازدهی</a>\r\n            <a href=\"#attending\" class=\"nav-elem\">نحوۀ شرکت</a>\r\n          </div>\r\n          <div class=\"section\">\r\n            <h2 className=\"sub-title\" id=\"goal\">هدف</h2>\r\n            <p>\r\n            این مسابقه سعی دارد تا در بستر یک رقابت سرگرم‌کننده به همراه جایزه، امکان جمع‌آوری داده برای یک پروژه علمی در زمینه پردازش زبان طبیعی را فراهم کند که در صورت رعایت اصولی ساده، این داده‌ها می‌توانند هم بسیار کمک‌کننده و ارزشند باشند و هم منجر به دریافت جایزه شوند.\r\n            </p>\r\n            <p>\r\n            هدف ما، طراحی چنین رباتی است که همانند شما و یا نفر کناریتان، اگر سر صحبت را باز کرد و یا با آن گفتگویی صورت گرفت، در حین چت اطلاعات طرف مقابل را برای ارائه خدمات بعدی استخراج و ذخیره کند. \r\n            </p>\r\n            <p>\r\n            طبیعتا در ضمن چنین گفتگوهایی حتی با یک انسان، اگر مدام از شما سوال شود که مثلا «شما چند سال دارید؟»، «نگفتید شغلتان چیست؟»، «راستی شغل پدرتان را هم بگویید» حس بازجویی یا استنتاق بهتان دست می‌دهد و تمایل زیادی به ادامه صحبت ندارید. شاید حتی با خود بگویید او برای چه مرتبا با این سوالها وارد حریم خصوصی من می‌شود. بنابراین کسب این اطلاعات با طرح حداقل سوال مستقیم مطلوب‌ترین حالت پیشبرد مکالمه است ودر امتیاز شما نیز موثر است. شما باید به نحوی مخاطبتان را ترغیب به بیان اطلاعاتی از خودش کنید. \r\n            </p>\r\n            <p>\r\n            هنر خود را در جذب مخاطب و به اصطلاح حرف از زیر زبان او کشیدن اینجا نشان دهید و یا تمرین کنید! 😉\r\n            </p>\r\n            <p>\r\n            این ویژگی خصوصیت بدی هم نیست، باور کنید 😁\r\n            </p>\r\n          </div>\r\n          <div class=\"section\">\r\n            <h2 className=\"sub-title\" id=\"generalProc\">روند کلی مسابقه</h2>\r\n            <p>\r\n            در این مسابقه، شما وارد یک سامانه چت می‌شوید که در هر چت یا گفتگو، پروفایلی از اطلاعات شخصی بصورت تصادفی به شما تخصیص داده می‌شود؛ اگر خواستید اطلاعاتی از خود بیان کنید باید بر طبق همین پروفایل باشد. تمام سعی شما هم در ضمن چت این است که حدس بزنید پروفایل شخص مقابلتان چیست. \r\n            </p>\r\n          </div>\r\n          <div class=\"section\">\r\n            <h2 className=\"sub-title\" id=\"rules\">قوانین چت</h2>\r\n            <p>\r\n            این قوانین در هنگام ورود به هر چت نیز نمایش داده می‌شوند:\r\n            </p>\r\n            <ol>\r\n              <li>\r\n              پاسختان به سوالات شخصی که در چت از شما می‌شود باید بر اساس اطلاعات تخصیص داده شده در پروفایلتان باشد.\r\n              </li>\r\n              <li>\r\n             \tسعی کنید پروفایل مخاطب خود را حدس بزنید. هر چه این تخمین به پروفایل واقعی او نزدیکتر باشد امتیاز بیشتری می‌گیرید. حدستان باید در فرم پروفایل مخاطب وارد شود.\r\n              </li>\r\n              <li>\r\n              در ابتدای چت و پایان آن نیازی به ردوبدل کردن پیامهای احوال‌پرسی و خداحافظی نیست، در صورت لزوم به یک پیام بسنده کنید.\r\n              </li>\r\n              <li>\r\n              تا حد ممکن از پرسیدن سوالات مستقیم پرهیز کنید.\r\n              </li>\r\n              <li>\r\n              شما می‌توانید حداکثر ۲۷ پیام به طرف مقابل ارسال کنید.\r\n              </li>\r\n              <li>\r\n              حدّاقل باید ۴ پیام از طرف شما در چت موجود باشد.\r\n              </li>\r\n              <li>\r\n              پیامتان حاوی کلمات نامناسب نباشد. در صورت وجود، پیام خطایی صادر شده و از ارسال آن جلوگیری می‌شود.\r\n              </li>\r\n              <li>\r\n              هر پیام حدّاقل ۲ کلمه و حدّاکثر ۲۸ کلمه باشد.\r\n              </li>\r\n              <li>\r\n              پیام متنوع و با معنی باشد.\r\n              </li>\r\n              <li>\r\n              پیامها فارسی باشند و اصطلاحاً فینگلیش نباشند.\r\n              </li>\r\n              <li>\r\n              پیام‌های شما و مخاطبتان یکی در میان باشد.\r\n              </li>\r\n            </ol>\r\n          </div>\r\n          <div class=\"section\">\r\n            <h2 className=\"sub-title\" id=\"scoring\">نحوۀ امتیازدهی</h2>\r\n            <p>\r\n            سه عامل در امتیازدهی موثر هستند:\r\n            </p>\r\n            <ul>\r\n              <li>\r\n              طرح حداقل سوال مستقیم از کاربر. مثلا دو گفتۀ زیر را برای پر کردن آیتم «محل سکونت» در پروفایل مخاطب را در نظر بگیرید:\r\n            <ol>\r\n              <li>\r\n              «راستی مایل بودید تشریف بیارید شهر ما تهران، اگر هم بفرمایین کدوم شهر ساکنید امسال عید که برای سفر اومدیم ممکن هست از کنارتان گذر کنیم، آن وقت می‌توانیم بیاییم عرض ادبی بکنیم»\r\n              </li>\r\n              <li>\r\n              «شما ساکن کجا هستید؟»\r\n              </li>\r\n            </ol>\r\n            گفتۀ 1 که غیرمستقیم سوال پرسیده امتیاز بیشتری می‌گیرد.\r\n              </li>\r\n              <li>\r\n              پر کردن بیشترین میزان از اطلاعات درست در پروفایل مخاطب  \r\n              </li>\r\n              <li>\r\n              رسیدن به اطلاعات حداکثری از پروفایل با رد و بدل کردن پیام کمتر. طبیعتا شرکت‌کننده‌ای که بتواند با پیامهای کمتری (با ترغیب مخاطب) نسبت به سایر رقبایش همان حجم اطلاعات را استخراج کند برتر از بقیه بوده و امتیاز بیشتر می‌گیرد. \r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div class=\"section\">\r\n            <h2 className=\"sub-title\" id=\"attending\">نحوۀ شرکت در مسابقه</h2>\r\n            <p>\r\n            1. در صفحۀ ورودی سایت، اطلاعات اولیه و پایه‌ای از هدف و روند مسابقه ارائه داده شده است. \r\n            </p>\r\n            <p>\r\n            با کلیک بر روی دکمه «شرکت در مسابقه» وارد فضای اصلی مسابقه خواهید شد:\r\n            </p>\r\n            <img className=\"inside-img\" src={enterImg}/>\r\n            <p>\r\n            2. در این محیط، با انتخاب تب «ثبت‌نام» در منوی بالای صفحه، ثبت‌نام کرده و خودکار وارد سیستم شوید:\r\n            </p>\r\n            <img className=\"inside-img\" src={menuImg}/>\r\n            <p>\r\n            پس از ورود، ظاهر صفحه به شکل زیر تغییر می‌کند:\r\n            </p>\r\n            <img className=\"inside-img\" src={menuImg2}/>\r\n            <p>\r\n            حال می‌توانید از کشوی Username، نام کاربری دیگری را که مایل به چت با او هستید انتخاب و پس از فشردن دکمه «چت» با او وارد گفتگو شوید.\r\n            </p>\r\n            <p>\r\n            اگر هم پیش از این با شخصی وارد گفتگو شده‌اید می‌توانید با رفتن به تب «چت‌های من»، لیستی از مکالمات قبلی را دیده و هر کدام را که مایل به ادامه هستید انتخاب کنید تا از همانجایی که گفتگو قطع شده، روند را از سر بگیرید.\r\n            </p>\r\n            <p>\r\n            دقت کنید که در هنگام انتخاب نام کاربری از لیست کشویی، دایره سبزرنگ در کنار نام فرد نشانگر برخط بودن او و دایره سفید نشان آفلاین بودن است که در این صورت، هر زمان آنلاین شد پاسخ پیام ارسالی شما را خواهد داد:\r\n            </p>\r\n            <img className=\"inside-img\" src={selectImg}/>\r\n            <p>\r\n            در تب «چت‌های من» نیز دایره سفید و سبز به همین معنا هستند:\r\n            </p>\r\n            <img className=\"inside-img\" src={mychatsImg}/>\r\n            <p>\r\n            به علاوه، آخرین پیام رد و بدل شده در باکسِ هر چت به همراه تاریخ ارسال نشان داده می‌شود. چت‌ها بر اساس آخرین گفتگوی صورت گرفته مرتب شده‌اند و در هر گفتگو هم اگر نوبت ارسال پیام شما باشد یک نشانگر «چیزی بگو» در کنار آن ظاهر می‌شود. \r\n            </p>\r\n            <p>\r\n            3. در صفحۀ اصلی گفتگو، ابتدا قوانین چت نمایش داده می‌شود:\r\n            </p>\r\n            <img className=\"inside-img\" src={rulesImg}/>\r\n            <p>\r\n            در این صفحه دو پروفایل یکی در سمت چپ با عنوان «پروفایل شما» و یکی در سمت راست با عنوان «پروفایل مخاطب» نمایش داده شده است که در قالب فرم بوده و شما باید آن را پر کنید:\r\n            </p>\r\n            <img className=\"inside-img\" src={chatImg}/>\r\n            <p>\r\n            پروفایل شما مجموعه‌ای از اطلاعات شخصیِ تخصیص داده به شما است همانند نام، سن یا شغل که چتتان باید بر اساس این اطلاعات باشد. برای مثال اگر در ضمن چت درباره اسم یا سنتان صحبتی به میان آمد باید نام یا عدد سنی که در پروفایل نوشته شده را بیان کنید. همچنین اگر از سوی دیگر، بطور مستقیم یا غیر مستقیم از اطلاعات مخاطب خود آگاه شدید باید آن را در فرم پروفایل مخاطب وارد کنید و دکمه ثبت پروفایل را بزنید تا نتیجه، ثبت شود و بازخورد متناسب از سوی سیستم بهتان داده شود. دقت کنید که دکمه ثبت پروفایل را در ضمن چت، هر زمان که حتی بخشی از داده مخاطب را هم وارد کردید می‌توانید بفشارید و کلیک چند باره بر روی آن در زمان‌های مختلف از گفتگو مانعی ندارد.  \r\n            </p>\r\n          </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\context\\auth.js",[],"D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\Home.js",["123","124","125","126","127","128"],"import { useQuery, useMutation, gql } from \"@apollo/client\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport thefLogo from './hacker-opac.png';\r\n\r\nfunction Home() {\r\n  const history = useHistory();\r\n  const onPrizes = () => {\r\n    history.push(\"chatlobby\");\r\n  };\r\n  const onLogin = () => {\r\n    history.push(\"login\");\r\n  };\r\n  const customStyle = {'maxWidth':'80%', 'backgroundImage':`url(${thefLogo})`, 'backgroundRepeat':'no-repeat', 'backgroundPosition':'1% 18%'};\r\n  return (\r\n    <div className=\"hero-card\" style={customStyle}>\r\n      <div className=\"hero-title\">مسابقه «حدس بزن من کی‌ام!»</div>\r\n      <div className=\"hero-body hero-welcome\">\r\n        به مسابقه‌ی آزمایشگاه پردازش زبان‌های طبیعی دانشگاه شهید\r\n        بهشتی خوش آمدید.\r\n      </div>\r\n      {/* <div><img src={thefLogo}/></div> */}\r\n      <div className=\"hero-subtitle\">چرا؟</div>\r\n      <div className=\"hero-body\">\r\n        هدف ما از برگزاری این مسابقه جمع‌آوری داده برای توسعه و پژوهش در حوزه‌ی\r\n        پردازش متن و گفتار زبان فارسی است.\r\n      </div>\r\n      <div className=\"hero-subtitle\">چگونه؟</div>\r\n      <div className=\"hero-body\">\r\n      در این مسابقه شما به گفتگو با دیگر مسابقه دهندگان در قالب چت می‌پردازید. \r\n      <br/>\r\n      در آغاز هر گفتگو، به شما و طرف مقابلتان هر یک پروفایلی شامل اطلاعات شخصی نسبت داده می‌شود که باید در حین مکالمه سعی کنید هرچه بیشتر پروفایل مخاطب خود را حدس بزنید.\r\n      <br/> نتیجه حدستان هر چه به پروفایل واقعی او نزدیکتر باشد امتیاز بیشتری دریافت خواهید کرد. \r\n        <br /> \r\n        باید در این راستا حتی الامکان از طرح سوال مستقیم خودداری کنید و بیشتر او را ترغیب به دادن اطلاعات نمایید.\r\n      </div>\r\n      <div className=\"hero-subtitle\">چقدر؟</div>\r\n      <div className=\"hero-body\">\r\n        جایزه‌ی نهایی بر حسب مجموع امتیازات کسب شده‌ی افراد محاسبه می‌گردد. برای\r\n        مثال اگر همه‌ی شرکت کنندگان در مجموع ۵ هزار امتیاز جمع‌اوری کنند جایزه\r\n        ۵۰۰ هزار تومان خواهد بود ولی اگر ۱۵ هزار امتیاز جمع‌آوری کنند جایزه ۱\r\n        میلیون تومان خواهد بود.\r\n      </div>\r\n      <div className=\"hero-button-container\">\r\n        <Button className=\"form-field hero-button\" primary onClick={onPrizes}>\r\n          شرکت در مسابقه\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\Login.js",[],"D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\Register.js",[],"D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\components\\SnackBar.js",["129"],"import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst Alert = (props) => {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\nexport let openSuccessSnack = () => {\r\n  console.error(\"openSuccessSnack isn't set yet!\");\r\n};\r\n\r\nexport let openErrorSnack = () => {\r\n  console.error(\"openErrorSnack isn't set yet!\");\r\n};\r\n\r\nexport const SnackBar = (props) => {\r\n  const classes = useStyles();\r\n  const [openError, setOpenError] = React.useState(false);\r\n  const [openSuccess, setOpenSuccess] = React.useState(false);\r\n  const [text, setText] = React.useState(\"\");\r\n  const handleSuccess = (successText = \" موفّقیّت آمیز بود\") => {\r\n    setText(successText);\r\n    setOpenSuccess(true);\r\n  };\r\n  const handleError = (errText = \"!اوه اوه اتَّفاق بدی افتاد\") => {\r\n    setText(errText);\r\n    setOpenError(true);\r\n  };\r\n  openSuccessSnack = handleSuccess;\r\n  openErrorSnack = handleError;\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpenSuccess(false);\r\n    setOpenError(false);\r\n  };\r\n  const vertical = \"top\",\r\n    horizontal = \"left\";\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Snackbar\r\n        anchorOrigin={{ vertical, horizontal }}\r\n        open={openSuccess}\r\n        autoHideDuration={5000}\r\n        onClose={handleClose}\r\n      >\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          {text}\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar\r\n        anchorOrigin={{ vertical, horizontal }}\r\n        open={openError}\r\n        autoHideDuration={10000}\r\n        onClose={handleClose}\r\n      >\r\n        <Alert onClose={handleClose} severity=\"error\">\r\n          {text}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\n","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\Profile.js",["130","131","132","133","134","135","136"],"import { Message } from \"semantic-ui-react\";\r\nimport React, { useEffect, useRef, useContext, useState } from \"react\";\r\nimport { ErrorBoundary } from \"react-error-boundary\";\r\nimport { useQuery, gql, useSubscription, useMutation } from \"@apollo/client\";\r\nimport ErrorFallBackPage from \"./ErrorFallBack\";\r\nimport { AuthContext } from \"../context/auth\";\r\nimport { openSuccessSnack } from \"../components/SnackBar\";\r\nimport { GET_CHAT_REQUESTS } from \"./chat/ChatLobby\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport MenuBar from \"../components/MenuBar\";\r\nimport \"./Profile.css\";\r\n\r\nconst maxRound = 27;\r\n// const CHAT_HISTORY_QUERY = gql`\r\n//   {\r\n//     myChats {\r\n//       receiver\r\n//       lastMessage {\r\n//         user\r\n//         receiver\r\n//         content\r\n//         createdAt\r\n//       }\r\n//     }\r\n//   }\r\n// `;\r\n\r\nconst CHAT_HISTORY_QUERY = gql`\r\n  {\r\n    myChats_my {\r\n      id\r\n      user\r\n      alias\r\n      messages{\r\n        receiver\r\n        content\r\n        createdAt\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_ONLINE_USERS = gql`\r\n  subscription {\r\n    onlineUsers {\r\n      username\r\n      alias\r\n      isOnline\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_ONLINE_USERS_INIT = gql`\r\n  {\r\n    onlineUsersInit {\r\n      username\r\n      alias\r\n      isOnline\r\n    }\r\n  }\r\n`;\r\nfunction Profile() {\r\n  const { user } = useContext(AuthContext);\r\n  const [chats, setChats] = useState([]);\r\n  const history = useHistory();\r\n  const historyQuery = useQuery(CHAT_HISTORY_QUERY, {\r\n    onCompleted: (data) => {\r\n      setChats(data.myChats_my);\r\n    },\r\n    onError: (err) => {\r\n      console.error(JSON.stringify(err, null, 2));\r\n    },fetchPolicy:\"no-cache\",\r\n  });\r\n\r\n  const onlineInitQuery = useQuery(GET_ONLINE_USERS_INIT, {\r\n    fetchPolicy: \"network-only\",\r\n  });\r\n\r\n  const onlinesSub = useSubscription(GET_ONLINE_USERS, {\r\n    fetchPolicy: \"network-only\",\r\n  });\r\n  const getOnlineUsers = () => {\r\n    let onLineList = [];\r\n    if (onlineInitQuery.data) onLineList = onlineInitQuery.data.onlineUsersInit;\r\n    if (onlinesSub.data) onLineList = onlinesSub.data.onlineUsers;\r\n    return onLineList;\r\n  };\r\n  const onlineList = getOnlineUsers();\r\n  const onItemClick = (otherUserName) => {\r\n    return () => {\r\n      history.push(\"/chat\", { otherUser: otherUserName});\r\n    };\r\n  };\r\n  const requestsSub = useSubscription(GET_CHAT_REQUESTS, {\r\n    variables: { receiver: user.username },\r\n  });\r\n  const openSnackAsync = async (text) => {\r\n    openSuccessSnack(text);\r\n  };\r\n  if (\r\n    requestsSub?.data?.chatRequestSub &&\r\n    requestsSub.data.chatRequestSub !== \"\"\r\n  ) {\r\n    openSnackAsync(\"پیام جدید! صفحه را رفرش کنید تا در بالای لیست چت‌ها بیاید\");\r\n  }\r\n  // console.log(chats)\r\n  if (!user)\r\n    return (\r\n      <>\r\n        <MenuBar />\r\n        <Message\r\n          error\r\n          header=\"Action Forbidden\"\r\n          content=\"You can only sign up for an account once with a given e-mail address.\"\r\n        />\r\n      </>\r\n    );\r\n  else if (chats.length > 0 && !onlineInitQuery.loading) {\r\n    \r\n    const sortedChat = [...chats].sort(function (a, b) {\r\n      // console.log('b updated at')\r\n      // console.log(b.updatedAt)\r\n      return b.updatedAt - a.updatedAt;//b.createdAt - a.createdAt;\r\n    });\r\n    return (\r\n      <>\r\n        <MenuBar />\r\n\r\n        <ul className=\"task-items\">\r\n          {sortedChat.map((c, index) => {\r\n            var notifMess = \"چیزی بگو\"\r\n            var colorClassStyle = {}\r\n            var roundNum = 0\r\n            if(c.messages.length>0){\r\n              roundNum = Math.floor(c.messages.length/2)\r\n              if(c.messages.length%2===1 && c.messages[c.messages.length - 1].user === user.username){\r\n                roundNum +=1\r\n              }\r\n            }\r\n            if(roundNum>=maxRound){colorClassStyle={\"backgroundColor\":\"#efdddd\"}; notifMess=\"تمام شد\"}\r\n            const otherUser = onlineList.find((u) => u.username === c.user);\r\n            return (\r\n              <li\r\n                className={\"item type5 col \" + Math.floor(Math.random() * 8)}\r\n                onClick={onItemClick(c.id)}\r\n                style={colorClassStyle}\r\n              >\r\n                <div className=\"task\">\r\n                  {/* <div className=\"icon\"> </div> */}\r\n                  <div className=\"name\">\r\n                    {c.alias}\r\n                    <span\r\n                      className={\r\n                        \" online-badge \" +\r\n                        (otherUser.isOnline ? \"online\" : \"not-online\")\r\n                      }\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"dates\">\r\n                  <div className=\"bar\">\r\n                    \r\n                    {(c.messages.length > 0 ? c.messages[c.messages.length-1].content: \"هنوز پیامی رد و بدل نشده\")} \r\n                    <br />\r\n                    <span className=\"subDate\">\r\n                      {new Date(c.updatedAt).toLocaleString()}\r\n                    </span>\r\n                    {(c.messages.length==0 || c.messages[c.messages.length-1].receiver==user.username || (roundNum>=maxRound)) && \r\n                      <div className=\"ctrl\"><span className=\"nortification\">{notifMess}</span></div>\r\n                    }\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </>\r\n    );\r\n  } else if (historyQuery.loading || onlineInitQuery.loading) {\r\n    return (\r\n      <>\r\n        <MenuBar />\r\n        <div class=\"loading\">\r\n          <span></span>\r\n          <span></span>\r\n          <span></span>\r\n          <span></span>\r\n          <span></span>\r\n        </div>\r\n      </>\r\n    );\r\n  } else\r\n    return (\r\n      <>\r\n        <MenuBar />\r\n        <div className=\"null-chat\">شما هنوز با کسی وارد گفت و گو نشده‌اید.</div>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\components\\MenuBar.js",[],"D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\chat\\ChatLobby.js",["137","138","139","140","141","142","143","144","145","146","147"],"import React, { useEffect, useRef, useContext } from \"react\";\r\nimport { ErrorBoundary } from \"react-error-boundary\";\r\nimport { useQuery, gql, useSubscription, useMutation } from \"@apollo/client\";\r\nimport ErrorFallBackPage from \"../ErrorFallBack\";\r\nimport { AuthContext } from \"../../context/auth\";\r\nimport { animateScroll } from \"react-scroll\";\r\nimport { Button, Dropdown, Header, Modal } from \"semantic-ui-react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport PrizesBar from \"../../components/ChatPrizeProgress\";\r\nimport ChatLeaderBoad from \"../../components/ChatLeaderBoard\";\r\nimport { openSuccessSnack } from \"../../components/SnackBar\";\r\nimport MenuBar from \"../../components/MenuBar\";\r\n\r\nconst CREAT_CHAT = gql`\r\n  mutation($user: String!, $receiver: String!) {\r\n    registerChat(user: $user, receiver: $receiver)\r\n  }\r\n`;\r\n\r\nexport const GET_CHAT_REQUESTS = gql`\r\n  subscription($receiver: String!) {\r\n    chatRequestSub(receiver: $receiver)\r\n  }\r\n`;\r\n\r\nconst SEND_CHAT_REQUESTS = gql`\r\n  mutation($user: String!, $receiver: String!) {\r\n    chatRequest(user: $user, receiver: $receiver)\r\n  }\r\n`;\r\nconst GET_CHAT_REQUESTS_ANSWER = gql`\r\n  subscription($receiver: String!) {\r\n    chatRequestAnswerSub(receiver: $receiver)\r\n  }\r\n`;\r\nconst SEND_CHAT_REQUEST_ANSWER = gql`\r\n  mutation($user: String!, $receiver: String!) {\r\n    chatRequestAnswer(user: $user, receiver: $receiver)\r\n  }\r\n`;\r\n\r\nconst GET_ONLINE_USERS = gql`\r\n  subscription {\r\n    onlineUsers {\r\n      username\r\n      alias\r\n      isOnline\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_ONLINE_USERS_INIT = gql`\r\n  {\r\n    onlineUsersInit {\r\n      username\r\n      alias\r\n      isOnline\r\n    }\r\n  }\r\n`;\r\nconst ALL_CHAT_POINTS = gql`\r\n  {\r\n    allChatPoints\r\n  }\r\n`;\r\nconst GET_CHAT_LEADERBOARD = gql`\r\n  {\r\n    topChatUsers_my {\r\n      username\r\n      totalPoints\r\n    }\r\n  }\r\n`;\r\n\r\nfunction RequestModal({ open, setOpen, user, onAccept }) {\r\n  return (\r\n    <Modal\r\n      onClose={() => setOpen(false)}\r\n      onOpen={() => setOpen(true)}\r\n      open={open}\r\n    >\r\n      <Modal.Header>\r\n        <p className=\"modal-text\">درخواست چت</p>\r\n      </Modal.Header>\r\n      <Modal.Content>\r\n        <Modal.Description>\r\n          <Header>\r\n            <p className=\"modal-text\">از طرف ‌{user}</p>\r\n          </Header>\r\n          <p className=\"modal-text\">کاربر {user} می‌خواهد با شما وارد چت شود</p>\r\n          <p className=\"modal-text\">موافقید؟</p>\r\n        </Modal.Description>\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button\r\n          color=\"red\"\r\n          className=\"modal-button\"\r\n          onClick={() => setOpen(false)}\r\n        >\r\n          خیر\r\n        </Button>\r\n        <Button\r\n          content=\"بلی\"\r\n          labelPosition=\"right\"\r\n          icon=\"checkmark\"\r\n          color=\"blue\"\r\n          onClick={() => {\r\n            setOpen(false);\r\n            onAccept(user);\r\n          }}\r\n          className=\"modal-button\"\r\n          primary\r\n        />\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n}\r\nconst sentRequest = {\r\n  to: \"\",\r\n  didSend: false,\r\n};\r\nconst ChatCard = ({\r\n  user,\r\n  usersList,\r\n  onDropdownChange,\r\n  other,\r\n  usernameError,\r\n  submit,\r\n  error,\r\n}) => {\r\n  return user.username !== \"\" ? (\r\n    <div className=\"chat-lobby-card\">\r\n      <div className=\"form-field\">\r\n        نام کاربری کاربر مورد نظرتان را پیدا کنید\r\n      </div>\r\n\r\n      <Dropdown\r\n        button\r\n        floating\r\n        labeled\r\n        options={usersList}\r\n        search\r\n        placeholder=\"Username:\"\r\n        className=\"chat-input-margined\"\r\n        onChange={onDropdownChange}\r\n        // text={other}\r\n      />\r\n      {usernameError && (\r\n        <div className=\"form-field chat-field-error\">\r\n          {usernameError\r\n            ? usernameError\r\n            : \"\" + \"\\n\" + (error ? \"خطایی رخ داد\" : \"\")}\r\n        </div>\r\n      )}\r\n      <Button\r\n        className=\"form-field chat-field-submit \"\r\n        primary\r\n        onClick={submit}\r\n      >\r\n        چت\r\n      </Button>\r\n    </div>\r\n  ) : (\r\n    <div></div>\r\n  );\r\n};\r\nconst ChatLobby = () => {\r\n  let { user } = useContext(AuthContext);\r\n  if (!user) user = { username: \"\" };\r\n  const history = useHistory();\r\n\r\n  const [modalOpen, setModalOpen] = React.useState(false);\r\n  const closeModalWithCallBack = () => {\r\n    setModalOpen(false);\r\n    requestsSub.data.chatRequestSub = \"\";\r\n  };\r\n  const [allPoints, setAllPoints] = React.useState(0);\r\n  const pointQuery = useQuery(ALL_CHAT_POINTS, {\r\n    onCompleted: (data) => {\r\n      setAllPoints(data.allChatPoints);\r\n    },\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n\r\n\r\n  const leaderboardQuery = useQuery(GET_CHAT_LEADERBOARD, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n\r\n  const onlineInitQuery = useQuery(GET_ONLINE_USERS_INIT, {\r\n    fetchPolicy: \"network-only\",\r\n  });\r\n\r\n  const onlinesSub = useSubscription(GET_ONLINE_USERS, {\r\n    fetchPolicy: \"network-only\",\r\n  });\r\n  const requestsSub = useSubscription(GET_CHAT_REQUESTS, {\r\n    variables: { receiver: user.username },\r\n  });\r\n\r\n  // const requestsAnswerSub = useSubscription(GET_CHAT_REQUESTS_ANSWER, {\r\n  //   variables: { receiver: user.username },\r\n  // });\r\n  // const [sendRequest] = useMutation(SEND_CHAT_REQUESTS, {});\r\n  // const [sendRequestAnswer] = useMutation(SEND_CHAT_REQUEST_ANSWER, {});\r\n  // if (requestsAnswerSub.error)\r\n  //   alert(JSON.stringify(requestsSub.error, null, 2));\r\n\r\n  // const getRequestAnswerMaker = () => {\r\n  //   return requestsAnswerSub?.data?.chatRequestAnswerSub &&\r\n  //     requestsAnswerSub.data.chatRequestAnswerSub !== \"\"\r\n  //     ? requestsAnswerSub.data.chatRequestAnswerSub\r\n  //     : null;\r\n  // };\r\n  // const answerMaker = getRequestAnswerMaker();\r\n  // if (answerMaker && answerMaker === sentRequest.to) {\r\n  //   history.push(\"/chat\", { otherUser: answerMaker });\r\n  // }\r\n\r\n  // const getRequestMaker = () => {\r\n  //   return requestsSub?.data?.chatRequestSub &&\r\n  //     requestsSub.data.chatRequestSub !== \"\"\r\n  //     ? requestsSub.data.chatRequestSub\r\n  //     : null;\r\n  // };\r\n\r\n  const openSnackAsync = async (text) => {\r\n    openSuccessSnack(text);\r\n  };\r\n  if (\r\n    requestsSub?.data?.chatRequestSub &&\r\n    requestsSub.data.chatRequestSub !== \"\"\r\n  ) {\r\n    openSnackAsync(\"پیام جدید دارید\");\r\n  }\r\n  const [other, setOther] = React.useState(\"\");\r\n\r\n  const getOnlineUsers = () => {\r\n    let onLineList = [];\r\n    if (onlineInitQuery.data) onLineList = onlineInitQuery.data.onlineUsersInit;\r\n    if (onlinesSub.data) onLineList = onlinesSub.data.onlineUsers;\r\n    return onLineList\r\n      .filter((u) => u.username !== user.username)\r\n      .sort(function (a, b) {\r\n        return b.isOnline - a.isOnline;\r\n      })\r\n      .map((u) => {\r\n        return {\r\n          key: u.username,\r\n          text: u.alias,\r\n          value: u.username,\r\n          label: {\r\n            color: u.isOnline ? \"green\" : \"white\",\r\n            empty: true,\r\n            circular: true,\r\n          },\r\n        };\r\n      });\r\n  };\r\n\r\n  const getErrors = () => {\r\n    let error = {};\r\n    // if (onlinesSub.error) error = onlinesSub.error;\r\n    if (onlineInitQuery.error) error = onlineInitQuery.error;\r\n    return error;\r\n  };\r\n\r\n  const error = getErrors();\r\n  const usersList = getOnlineUsers();\r\n  const [usernameError, setUsernameError] = React.useState(null);\r\n\r\n  const onDropdownChange = (e, data) => {\r\n    setOther(data.value);\r\n  };\r\n  const [registerchat, {loading, data: registerdchat}] = useMutation(CREAT_CHAT, {variables:{user: user.username, receiver: other}});\r\n  const submit = () => {\r\n    if (!usersList.map((item) => item.value).includes(other))\r\n      setUsernameError(\r\n        \"کاربر مورد نظر در لیست آنلاین‌ها نمی‌یابید؟ صفحه را رفرش کنید.\"\r\n      );\r\n    else {\r\n      registerchat()\r\n      // sendRequest({\r\n      //   variables: { user: user.username, receiver: other },\r\n      // });\r\n      // sentRequest.didSend = true;\r\n      // sentRequest.to = other;\r\n      /*if (registerdchat){\r\n        alert(typeof(registerdchat))\r\n        console.log(registerdchat._id)\r\n        history.push(\"/chat\", { otherUser: other });\r\n      }*/\r\n    }\r\n    // openSuccessSnack(\"درخواست شما ارسال شد\");\r\n\r\n    // history.push('/chat', { otherUser: other })\r\n  };\r\n  useEffect(() => {\r\n    if (registerdchat){\r\n      // console.log(registerdchat.registerChat)\r\n      // alert(registerdchat.registerChat)\r\n      // alert(other)\r\n      history.push(\"/chat\", { otherUser: registerdchat.registerChat});//other });\r\n    }\r\n  });\r\n  // const onAccept = (targetUser) => {\r\n  //   sendRequestAnswer({\r\n  //     variables: { user: user.username, receiver: targetUser },\r\n  //   });\r\n  //   history.push(\"/chat\", { otherUser: targetUser });\r\n  // };\r\n  const isLoading = () => {\r\n    return (\r\n      leaderboardQuery.loading || onlineInitQuery.loading || pointQuery.loading\r\n    );\r\n  };\r\n\r\n  return !isLoading() ? (\r\n    <>\r\n      <ErrorBoundary FallbackComponent={ErrorFallBackPage}>\r\n        <MenuBar />\r\n        <div className=\"chat-lobby-container \">\r\n          <div className=\"lobby-container-left\">\r\n            <ChatCard\r\n              user={user}\r\n              usersList={usersList}\r\n              onDropdownChange={onDropdownChange}\r\n              other={other}\r\n              usernameError={usernameError}\r\n              submit={submit}\r\n              error={error}\r\n            />\r\n            <ChatLeaderBoad\r\n              leaderboardData={leaderboardQuery.data?.topChatUsers_my}\r\n              username={user.username}\r\n            />\r\n          </div>\r\n          <PrizesBar totalPoints={allPoints}></PrizesBar>\r\n        </div>\r\n        {/* <RequestModal\r\n        open={modalOpen}\r\n        setOpen={closeModalWithCallBack}\r\n        user={getRequestMaker()}\r\n        onAccept={onAccept}\r\n      /> */}\r\n      </ErrorBoundary>\r\n    </>\r\n  ) : (\r\n    <>\r\n      <MenuBar />\r\n      <div class=\"loading\">\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatLobby;\r\n","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\chat\\Chat.js",["148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171"],"import React, { useEffect, useRef, useContext, useState } from \"react\";\r\nimport { useSubscription, useMutation, gql, useQuery } from \"@apollo/client\";\r\nimport { AuthContext } from \"../../context/auth\";\r\nimport { animateScroll } from \"react-scroll\";\r\nimport { Input, Button, Transition, Modal, Header } from \"semantic-ui-react\";\r\nimport isContentValid from \"../../util/ChatValidations\";\r\nimport isDirectQuestion from \"../../util/CheckIsDirect\";\r\nimport { ErrorBoundary } from \"react-error-boundary\";\r\nimport { openSuccessSnack, openErrorSnack } from \"../../components/SnackBar\";\r\nimport { GET_CHAT_REQUESTS } from \"./ChatLobby\";\r\nimport ErrorFallBackPage from \"../ErrorFallBack\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport MenuBar from \"../../components/MenuBar\";\r\nimport \"./Chat.css\";\r\nimport { Form } from \"semantic-ui-react\";\r\nimport { useForm } from \"../../util/hooks\";\r\nimport ProfileEditer from \"./RegisterProfile\";\r\nimport axios from \"axios\";\r\n\r\nconst maxRound = 27;\r\n// var sendMesCount = 0;\r\n\r\nconst FIND_CHAT = gql`\r\n  query FindChat($chatId: ID!) {\r\n    findChat(chatId: $chatId) {\r\n      id\r\n      content\r\n      user\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_CHAT_ALIAS = gql`\r\n  query GetChatAlias($chatId: ID!) {\r\n    getChatAlias(chatId: $chatId)\r\n  }\r\n`;\r\n\r\nconst GET_PROFILES = gql`\r\n  query GetProfiles($messageColl_id: ID!) {\r\n    getProfiles(messageColl_id: $messageColl_id) {\r\n      userProfile\r\n      {\r\n        job\r\n        spouseJob\r\n        fatherJob\r\n        motherJob\r\n        name\r\n        age\r\n        gender\r\n        noSiblings\r\n        noSisters\r\n        noBrothers\r\n        noBoys\r\n        noGirls\r\n        noChilren\r\n        mariageStatus\r\n        hobby \r\n        favBook \r\n        favFilm \r\n        favDish \r\n        resistance\r\n      }\r\n      predictRProfile\r\n      {\r\n        job\r\n        spouseJob\r\n        fatherJob\r\n        motherJob\r\n        name\r\n        age\r\n        gender\r\n        noSiblings\r\n        noSisters\r\n        noBrothers\r\n        noBoys\r\n        noGirls\r\n        noChilren\r\n        mariageStatus\r\n        hobby\r\n        favBook \r\n        favFilm \r\n        favDish \r\n        resistance\r\n      }\r\n      receiverProfile\r\n      {\r\n        job\r\n        spouseJob\r\n        fatherJob\r\n        motherJob\r\n        name\r\n        age\r\n        gender\r\n        noSiblings\r\n        noSisters\r\n        noBrothers\r\n        noBoys\r\n        noGirls\r\n        noChilren\r\n        mariageStatus\r\n        hobby\r\n        favBook \r\n        favFilm \r\n        favDish \r\n        resistance\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_MESSAGES_INIT = gql`\r\n  query Message($receiver: String!, $other: String!) {\r\n    messages(receiver: $receiver, other: $other) {\r\n      id\r\n      content\r\n      user\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_MESSAGES = gql`\r\n  subscription($receiver: String!, $other: String!) {\r\n    messages_my(receiver: $receiver, other: $other) {\r\n      id\r\n      content\r\n      user\r\n    }\r\n  }\r\n`;\r\n\r\nconst POST_MESSAGE = gql`\r\n  mutation($user: String!, $receiver: String!, $content: String!, $isDirect: Boolean!) {\r\n    postMessage_my(user: $user, receiver: $receiver, content: $content, isDirect: $isDirect)\r\n  }\r\n`;\r\nconst EXIT_CHAT = gql`\r\n  mutation {\r\n    exitChat\r\n  }\r\n`;\r\nconst REGISTER_PROFILE = gql`\r\n  mutation($chatId: String!, $job:String!, $name:String!){\r\n    postReceiverProfile(chatId: $chatId, job:$job, name:$name) \r\n  }\r\n`;\r\nconst SET_DIRECT_QUESTION = gql`\r\n  mutation($chatId: ID!){\r\n    plusDirectQNums_msgcollect(chatId:$chatId)\r\n  }\r\n`;\r\n\r\nfunction UserProfile(userProf){//\r\n  var gender = \"-\"\r\n  const male = \"مرد\", female = \"زن\"\r\n  if(userProf.gender!=null){\r\n    gender = (userProf.gender==true? male: female)\r\n  }\r\n  var marriageStatus = \"-\"\r\n  const single = \"مجرد\", married = \"متاهل\"\r\n  if(userProf.mariageStatus!=null){\r\n    marriageStatus = (userProf.mariageStatus==\"single\"? single: married)\r\n  }\r\n  return (\r\n    <div className=\"profile\">\r\n      <span className=\"profile-text-title\">پروفایل شما</span>\r\n      <span className=\"profile-text\">نام: {userProf.name}</span>\r\n      <span className=\"profile-text\">جنسیت: {gender}</span>\r\n      <span className=\"profile-text\">سن: {(userProf.age!=null?userProf.age:\"-\")}</span>\r\n      <span className=\"profile-text\">وضعیت تاهل: {marriageStatus}</span>\r\n      <span className=\"profile-text\">شغل خود: {(userProf.job!=null?userProf.job:\"-\")}</span>\r\n      {/* {marriageStatus=='متاهل' && \r\n      <span className=\"profile-text\">شغل همسر: {(userProf.spouseJob!=null?userProf.spouseJob:\"-\")}</span>} */}\r\n      {marriageStatus=='متاهل' && \r\n      <span className=\"profile-text\">تعداد فرزندان دختر: {(userProf.noGirls!=null?userProf.noGirls:\"-\")}</span>}\r\n      {marriageStatus=='متاهل' && \r\n      <span className=\"profile-text\">تعداد فرزندان پسر: {(userProf.noBoys!=null?userProf.noBoys:\"-\")}</span>}\r\n      <span className=\"profile-text\">تعداد خواهران: {(userProf.noSisters!=null?userProf.noSisters:\"-\")}</span>\r\n      <span className=\"profile-text\">تعداد برادران: {(userProf.noBrothers!=null?userProf.noBrothers:\"-\")}</span>\r\n      {/* <span className=\"profile-text\">شغل پدر: {(userProf.fatherJob!=null?userProf.fatherJob:\"-\")}</span>\r\n      <span className=\"profile-text\">شغل مادر: {(userProf.motherJob!=null?userProf.motherJob:\"-\")}</span> */}\r\n      <span className=\"profile-text\">علاقه‌مندی کلی: {(userProf.hobby!=null?userProf.hobby:\"-\")}</span>\r\n      {/* <span className=\"profile-text\">کتاب موردعلاقه: {(userProf.favBook!=null?userProf.favBook:\"-\")}</span>\r\n      <span className=\"profile-text\">فیلم موردعلاقه: {(userProf.favFilm!=null?userProf.favFilm:\"-\")}</span>\r\n      <span className=\"profile-text\">غذای موردعلاقه: {(userProf.favDish!=null?userProf.favDish:\"-\")}</span> */}\r\n      <span className=\"profile-text\">محل سکونت: {(userProf.resistance!=null?userProf.resistance:\"-\")}</span>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nfunction ReceiverProfile(receiverProf, chatId){\r\n  // console.log('receiverProf is: ')\r\n  // console.log(receiverProf)\r\n  const [registerProfile] =useMutation(REGISTER_PROFILE);//, {variables:{\r\n  //     chatId: chatId,\r\n  //     job: \"\",\r\n  //     name: \"\",\r\n  //   },\r\n  //   onError(error) {\r\n  //   if (!error.graphQLErrors) return;\r\n  //   console.log(error&&error.graphQLErrors[0]?error.graphQLErrors[0].extensions.exception.errors:{});\r\n  // },\r\n  // });\r\n  // const { onChange, onSubmit, values, setValues, errors, setErrors } = useForm(\r\n  //   registerRProfile(),\r\n  //   {\r\n  //     name: \"\",\r\n  //     //age: \"\",\r\n  //     //job: \"\",\r\n  //   }\r\n  // );\r\n  // let state = {\r\n  //   name: '',\r\n  // }\r\n  // console.log('chatId is: ')\r\n  // console.log(chatId)\r\n   //[registerProfile,{ loading: registerLoading, data: registerData },] = \r\n  //, {\r\n  // variables: {\r\n  //   chatId: \"\",\r\n  //   job: \"\",\r\n  //   name: \"\",\r\n  //   age: 0,\r\n  // },\r\n  // onError(error) {\r\n  //   if (!error.graphQLErrors) return;\r\n  // setErrors(error&&error.graphQLErrors[0]?error.graphQLErrors[0].extensions.exception.errors:{});\r\n  //   setValues({\r\n  //     name: \"\",\r\n  //     //email: \"\",\r\n  //     //password: \"\",\r\n  //   });\r\n  // },\r\n  // ignoreResults: false,\r\n  // onCompleted: (data) => {\r\n  //   setErrors({});\r\n  //   setValues({\r\n  //     name: \"\",\r\n  //     //email: \"\",\r\n  //     //password: \"\",\r\n  //   });\r\n  // },\r\n//  });\r\n  // function registerRProfile(){\r\n  //   registerProfile();\r\n  // }\r\n  \r\n  //      onSubmit={onSubmitProf}\r\n  // const onSubmit = async() => {\r\n  //   registerProfile();\r\n  // }\r\n  // const onChange = e =>{\r\n  //   const{name, value}=e.target;\r\n  //   this.setState({[name]:value});\r\n  // }\r\n  // const {name} = state;\r\n  return (\r\n    <div className=\"profile-receiver\">\r\n      <span className=\"profile-text-title\">پروفایل مخاطب</span>\r\n    <Form\r\n      // onSubmit={onSubmit}\r\n      //loading = {registerLoading}\r\n    >\r\n      <Form.Input\r\n        name=\"name\"\r\n        label=\"نام\"\r\n        placeholder=\"name\"\r\n        // onChange={onChange}\r\n        // value={name}//{values.name}\r\n        className=\"profile-input-field form-field\"\r\n        defaultValue = {(receiverProf!=null ? receiverProf.name: \"\")}\r\n      />\r\n      <Form.Input\r\n            name=\"prohob\"\r\n            label=\"علاقه مندی ها\"\r\n            placeholder=\"خواندن کتاب، گوش کردن به موسیقی و...\"\r\n            type=\"text\"\r\n            className=\"form-field\"\r\n        />\r\n        <Form.Input\r\n            name=\"prores\"\r\n            label=\"محل زندگی\"\r\n            placeholder=\"تهران\"\r\n            type=\"text\"\r\n            className=\"form-field\"\r\n        />\r\n        <Form.Button className=\"form-field\" primary>\r\n        ثبت پروفایل\r\n        </Form.Button>\r\n      </Form>\r\n    </div>\r\n    // <div className=\"profile-receiver\">\r\n    //   <span className=\"profile-text-title\">پروفایل مخاطب</span>\r\n    //   <span className=\"profile-text\">نام: پگاه</span>\r\n    //   <span className=\"profile-text\">جنسیت: زن</span>\r\n    //   <span className=\"profile-text\">شغل: کارمند</span>\r\n    //   <span className=\"profile-text\">سرگرمی: مطالعه کتاب</span>\r\n    //   <span className=\"profile-text\">محل سکونت: تهران</span>\r\n    // </div>\r\n\r\n  );\r\n}\r\nfunction RulesModal() {\r\n  const [open, setOpen] = useState(true);\r\n  return (\r\n    <Modal\r\n      onClose={() => setOpen(false)}\r\n      onOpen={() => setOpen(true)}\r\n      open={open}\r\n    >\r\n      <Modal.Header>\r\n        <p className=\"modal-text\">قوانین چت</p>\r\n      </Modal.Header>\r\n      <Modal.Content>\r\n        <Modal.Description>\r\n          <Header>\r\n            <p className=\"modal-text\">\r\n              تشکّر از همکاری شما. برای گرفتن امتیاز، گفت‌و‌گوی شما باید\r\n              در چهارچوب زیر قرار گیرد:\r\n            </p>\r\n          </Header>\r\n          <p className=\"modal-text\">\r\n          ۱. پاسخ شما به سوالات شخصی که در چت از شما می‌شود باید بر اساس اطلاعات تخصیص داده شده در پروفایلتان (سمت چپ) باشد.\r\n          </p>\r\n          <p className=\"modal-text\">\r\n          ۲. سعی کنید پروفایل مخاطب خود را حدس بزنید. هر چه این تخمین به پروفایل واقعی او نزدیکتر باشد امتیاز بیشتری می‌گیرید.\r\n          </p>\r\n          <p className=\"modal-text\">\r\n          ۳. در اول چت و پایان آن نیازی به ردوبدل کردن پیامهای احوال‌پرسی و خداحافظی نیست، در صورت لزوم به یک پیام بسنده کنید.\r\n          </p>\r\n          <p className=\"modal-text b\">\r\n          ۴. تا حد ممکن از پرسیدن سوالات مستقیم پرهیز کنید.\r\n          </p>\r\n          <p className=\"modal-text b\">\r\n          ۵. شما می‌توانید حداکثر ۲۷ پیام به طرف مقابل ارسال کنید.\r\n          </p>\r\n          <p className=\"modal-text b\">۶. حدّاقل باید ۴ پیام از طرف شما در چت موجود باشد.</p>\r\n          <p className=\"modal-text\">\r\n          ۷. پیامتان حاوی کلمات نامناسب نباشد.\r\n          </p>\r\n          <p className=\"modal-text\">۸.هر پیام حدّاقل ۲ کلمه و حدّاکثر ۲۸ کلمه باشد.</p>\r\n          <p className=\"modal-text\">۹.متنوع و با معنی باشد</p>\r\n          <p className=\"modal-text\">\r\n          ۱۰. فارسی باشد (اصطلاحاً فینگلیش نباشد).\r\n          </p>\r\n          <p className=\"modal-text\">\r\n          ۱۱. پیام‌های شما و مخاطبتان یکی در میان باشد.\r\n          </p>\r\n        </Modal.Description>\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button\r\n          content=\"متوجه شدم\"\r\n          labelPosition=\"right\"\r\n          icon=\"checkmark\"\r\n          color=\"blue\"\r\n          onClick={() => {\r\n            setOpen(false);\r\n          }}\r\n          className=\"modal-button\"\r\n          primary\r\n        />\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n}\r\nconst Messages = ({ user, other, data, initQuery }) => {\r\n  //console.log(JSON.stringify(initQuery))\r\n  //console.log(initQuery)\r\n  //return null;\r\n  var sendMesCount = 0\r\n  if (!data && !initQuery.data.findChat) {\r\n    return null;\r\n  }\r\n  const activeData =\r\n    data && data.messages_my && data.messages_my.length > 0 ? data.messages_my : initQuery.data.findChat;\r\n  animateScroll.scrollToBottom({\r\n    containerId: \"ContainerElementID\",\r\n  });\r\n\r\n  if(activeData && activeData.length > 0){\r\n    sendMesCount = Math.floor(activeData.length/2)\r\n    if(activeData.length%2===1 && activeData[activeData.length - 1].user === user){\r\n      sendMesCount +=1\r\n    }\r\n  }else{sendMesCount = 0;}\r\n  // console.log('activeData is: ')\r\n  // console.log(activeData)\r\n\r\n  //console.log(activeData.messages)\r\n  //{activeData.messages.map(({ id, user: messageUser, content }) => (\r\n\r\n  return activeData ? (\r\n    <div>\r\n      <div className=\"chat\" id=\"ContainerElementID\">\r\n        {activeData.map(({ id, user: messageUser, content }) => (\r\n          <div class=\"message-row\">\r\n            <div\r\n              class={\r\n                \"message message--\" + (user === messageUser ? \"sent\" : \"recieved\")\r\n              }\r\n            >\r\n              <div class=\"message-avatar\">\r\n                {user === messageUser ? \"شما\" : \"مخاطب\"}\r\n              </div>\r\n              <div class=\"message-bubble\">\r\n                <p className=\"message-text rtl-form-field \">{content}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"roundnum rtl-form-field\">پیام باقیمانده: {sendMesCount}/{maxRound}</div>\r\n    </div>\r\n    \r\n  ) : (\r\n    <div class=\"loading\">\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n    </div>\r\n  );\r\n};\r\nconst Chat = ({ otherUser}) => {\r\n  const [postMessage] = useMutation(POST_MESSAGE);\r\n  const [setIsDirectQ] = useMutation(SET_DIRECT_QUESTION);\r\n  const history = useHistory();\r\n  const [exitChat] = useMutation(EXIT_CHAT);\r\n\r\n  const other = otherUser.location.state\r\n  //const chatID = other\r\n    ? otherUser.location.state.otherUser\r\n    : \"\";\r\n  \r\n  const [sendDisable, setSendDis] = useState(false);\r\n  // const [sendMesNum, setMesNum] = useState(sendMesCount);\r\n  // setMesNum(sendMesCount);\r\n\r\n  const [userProfile, setUProfile] = React.useState(false);\r\n  const [predictProfile, setRProfile] = React.useState(false);\r\n  const [receiverProfile, setReceProfile] = React.useState(false);\r\n  const [is_direct, setDirect] = React.useState(false);\r\n  // const [profilePoint, setprofilePoint] = React.useState(0);\r\n  const profiles = useQuery(GET_PROFILES,{variables: {messageColl_id: other}, onCompleted: (data) => {\r\n    setUProfile(data.getProfiles.userProfile);\r\n    setRProfile(data.getProfiles.predictRProfile);\r\n    setReceProfile(data.getProfiles.receiverProfile);\r\n    // setprofilePoint(data.getProfiles.profilePoint);\r\n    }, \r\n    fetchPolicy: \"no-cache\"});\r\n  // useEffect(async()=>{\r\n  //   if(profiles.data){\r\n  //     console.log(profiles.data)\r\n  //     setUProfile(profiles.data.getUProfiles);\r\n  //   }\r\n  // });\r\n  //console.log('userProfile is: ')\r\n  //console.log(userProfile)\r\n\r\n  //console.log(other)\r\n  //console.log(dataProfile)\r\n  const userProfileBlock = (userProfile!=false ? UserProfile(userProfile):\"\");//(dataProfile && dataProfile.data.getProfiles ? UserProfile(dataProfile.data.getProfiles.userProfile):\"\");\r\n  //const receiverProfileBlock = (predictedRProfile!=false ? ReceiverProfile(predictedRProfile, other):\"\");//ReceiverProfile(dataProfile.data.getProfiles.predictRProfile)//(dataProfile && dataProfile.data.getProfiles ? ReceiverProfile(dataProfile.data.getProfiles.receiverProfile):\"\");\r\n\r\n  let { user } = useContext(AuthContext);\r\n  if (!user) user = { username: \"\" };\r\n  const [state, stateSet] = React.useState({\r\n    user: user.username,\r\n    receiver: other,\r\n    content: \"\",\r\n    isDirect: false,\r\n    receiverProfile: null,\r\n    UserProfile: null\r\n  });\r\n  const { data, loading } = useSubscription(GET_MESSAGES, {\r\n    variables: { receiver: user.username, other: other },\r\n    fetchPolicy: \"network-only\",\r\n  });\r\n  /*const initQuery = useQuery(GET_MESSAGES_INIT, {\r\n    variables: { receiver: user.username, other: other },\r\n    fetchPolicy: \"network-only\",\r\n  });*/\r\n  const initQuery = useQuery(FIND_CHAT, {\r\n    variables: { chatId: other },\r\n    fetchPolicy: \"network-only\",\r\n  });\r\n  /*const InitQuery = () =>{ \r\n    const { loading, error, data } =useQuery(FIND_CHAT, {\r\n    variables: { chatId: other },\r\n    fetchPolicy: \"network-only\",\r\n    });\r\n    \r\n    if (error) {\r\n      console.error(JSON.stringify(error));\r\n    }else{\r\n      return data\r\n    }\r\n  };*/\r\n  // console.log(other)  \r\n  const openErrorSnackAsync = async (text) => {\r\n    openErrorSnack(text);\r\n  };\r\n  const onSend = () => {\r\n    // console.log(data)\r\n    // var sendMesCount=0\r\n    const activeData =\r\n      data && data.messages_my && data.messages_my.length > 0 ? data.messages_my : initQuery.data.findChat;\r\n    // if(activeData.length > 0){\r\n    //   sendMesCount = Math.floor(activeData.length/2)\r\n    //   if(activeData.length%2===1 && activeData[activeData.length - 1].user === user.username){\r\n    //     sendMesCount +=1\r\n    //   }\r\n    // }\r\n    // setMesNum(sendMesCount);\r\n\r\n    if(activeData.length > 0 && Math.floor(activeData.length/2)>=maxRound){\r\n      setSendDis(true);\r\n      setChatError(\"تعداد پیامهای مجاز برای ارسال در این چت از حد گذشته است\");\r\n      return;\r\n    }else if (\r\n      activeData.length > 0 &&\r\n      activeData[activeData.length - 1].user === user.username\r\n    ) {\r\n      setChatError(\"نوبت ارسال پیام شما نرسیده است\");\r\n      return;\r\n    }else{setChatError(\"\");}\r\n\r\n    if (user.username === \"\") history.push(\"/chatlobby\");\r\n    const error = isContentValid(state.content);\r\n    \r\n    if ((!error)){ \r\n      // isDirectQuestion(state.content).then(value => { \r\n      //   setDirect(value);\r\n      //   if (value==true){\r\n      //     // openErrorSnackAsync(\" 🤨 قراره سوال مستقیم نپرسی که!\");\r\n      //     alert(\" 😟 قراره سوال مستقیم نپرسی، امتیازت کم میشه ها!\")\r\n      //     // console.log(other)\r\n      //     setIsDirectQ({\r\n      //       variables: {chatId:other},\r\n      //     })\r\n      //   }\r\n      // }).catch(err => { console.log(err) });\r\n      state.isDirect = false;\r\n      postMessage({\r\n        variables: state,\r\n      });\r\n      setChatError(\"\");\r\n    } else {\r\n        setChatError(error);\r\n    }\r\n    stateSet({\r\n      ...state,\r\n      content: \"\",\r\n    });\r\n  };\r\n  const [chatError, setChatError] = React.useState(null);\r\n  const requestsSub = useSubscription(GET_CHAT_REQUESTS, {\r\n    variables: { receiver: user.username },\r\n  });\r\n  const openSnackAsync = async (text) => {\r\n    openSuccessSnack(text);\r\n  };\r\n  const otherAlias = useQuery(GET_CHAT_ALIAS, {variables:{chatId:other}})\r\n  // console.log('otherAlias')\r\n  // console.log(otherAlias)\r\n  if (\r\n    requestsSub?.data?.chatRequestSub &&\r\n    requestsSub.data.chatRequestSub !== \"\"\r\n  ) {\r\n    openSnackAsync(\"پیام جدید دارید\");\r\n  }\r\n  if (other === \"\") history.push(\"/chatlobby\");\r\n  // console.log(state)\r\n  //const userProf = UserProfile(state.UserProfile)\r\n  if (initQuery.loading)\r\n    return (\r\n      <>\r\n        <MenuBar />\r\n        <div class=\"loading\">\r\n          <span></span>\r\n          <span></span>\r\n          <span></span>\r\n          <span></span>\r\n          <span></span>\r\n        </div>\r\n      </>\r\n    );\r\n  else\r\n  //receiverProfileBlock}\r\n        return (\r\n          <>\r\n            <RulesModal />\r\n            <MenuBar />\r\n            {userProfileBlock}\r\n            {profiles.data && <ProfileEditer\r\n            chatId= {other}\r\n            predictProfile= {profiles.data?.getProfiles.predictRProfile}\r\n            receiverProfile = {profiles.data?.getProfiles.receiverProfile}\r\n            // profilePoint = {profiles.data?.getProfiles.profilePoint}\r\n            />}\r\n      \r\n            <div>\r\n              <div className=\"chat-header\">\r\n              {/* {state.receiver} */}\r\n                <div className=\"chat-header-username\">مخاطب: {(otherAlias.data?otherAlias.data.getChatAlias: '')}</div>\r\n              </div>\r\n              <Messages\r\n                user={state.user}\r\n                other={state.receiver}\r\n                initQuery={initQuery}\r\n                data={data}\r\n              />\r\n\r\n              <footer className=\"chat-footer\">\r\n                <Input\r\n                  className=\"chat-input rtl-form-field\"\r\n                  placeholder=\"چیزی بگو...\"\r\n                  value={state.content}\r\n                  onChange={(evt) =>\r\n                    stateSet({\r\n                      ...state,\r\n                      content: evt.target.value,\r\n                    })\r\n                  }\r\n                  onKeyUp={(evt) => {\r\n                    if (evt.keyCode === 13) {\r\n                      onSend();\r\n                    }\r\n                  }}\r\n                />\r\n                <div>\r\n                  <Button className=\"form-field\" primary onClick={() => onSend()} disabled={sendDisable}>\r\n                    ارسال\r\n                  </Button>\r\n                </div>\r\n              </footer>\r\n              <div className=\"chat-error\">{chatError}</div>\r\n              {/* <div className=\"roundnum rtl-form-field\">پیام باقیمانده: {sendMesNum}/{maxRound}</div> */}\r\n            </div>\r\n          </>\r\n        );\r\n};\r\n\r\nexport default Chat;\r\n","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\chat\\ChatProfile.js",["172","173"],"import { useMutation, gql } from \"@apollo/client\";\r\nimport { useEffect, useContext } from \"react\";\r\nimport { Form, Message } from \"semantic-ui-react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport MenuBar from \"../../components/MenuBar\";\r\nimport { AuthContext } from \"../../context/auth\";\r\nimport { useForm } from \"../../util/hooks\";\r\nimport React, { Component } from 'react';\r\n\r\nconst mariageOptions = [\r\n  { key: 'si', value: 'si', text: 'مجرد' },\r\n  { key: 'ma', value: 'ma', text: 'متاهل' },\r\n  ]\r\n\r\nclass ChatProfileForm extends Component {\r\n  state = {}\r\n  //history = useHistory()\r\n  /*const [other, setOther] = useState(\"\")\r\n  submit = () => {\r\n    history.push(\"/chat\", { otherUser: other });\r\n  };*/\r\n\r\n  handleChange = (e, { value }) => this.setState({ value })\r\n\r\n  render() {\r\n   const { value } = this.state\r\n   return (\r\n\t<>\r\n      <MenuBar />\r\n      <div className=\"form-container\">\r\n        <Form\r\n        >\r\n          <h1 className=\"page-title\">پروفایل شما</h1>\r\n          <Form.Input\r\n            name=\"username\"\r\n            label=\"نام\"\r\n            placeholder=\"name\"\r\n            type=\"text\"\r\n            autoComplete=\"name\"\r\n            className=\"form-field\"\r\n          />\r\n\t\t  <Form.Group inline className=\"form-field\">\r\n\t\t\t\t<label>جنسیت\r\n\t\t\t\t</label>\r\n\t\t\t\t<Form.Radio\r\n\t\t\t\t   label='مرد'\r\n                   value='ma' \r\n\t\t\t\t   checked={value === 'ma'}\r\n                   onChange={this.handleChange}\r\n                />\r\n                <Form.Radio\r\n                   label='زن'\r\n                   value='fe'\r\n\t\t\t\t   checked={value === 'fe'}\r\n                   onChange={this.handleChange}\r\n                 />\r\n\t\t\t\t \r\n          </Form.Group>\r\n          <Form.Input\r\n            name=\"email\"\r\n            label=\"سن\"\r\n            placeholder=\"age\"\r\n            type=\"text\"\r\n            autoComplete=\"email\"\r\n            className=\"form-field\"\r\n          />\r\n\t\t  <Form.Input\r\n            name=\"jog\"\r\n            label=\"شغل\"\r\n            placeholder=\"occupation\"\r\n            type=\"text\"\r\n            autoComplete=\"occupation\"\r\n            className=\"form-field\"\r\n          />\r\n          <Form.Select \r\n            label='وضعیت تاهل'\r\n            options={mariageOptions}\r\n            placeholder='وضعیت خود را انتخاب کنید'\r\n\t\t\tclassName=\"form-field\"\r\n          />\r\n\t\t  <Form.Input\r\n            name=\"jog\"\r\n            label=\"شغل همسر\"\r\n            placeholder=\"spouse occupation\"\r\n            type=\"text\"\r\n            autoComplete=\"occupation\"\r\n            className=\"form-field\"\r\n          />\r\n\t\t  <Form.Group inline className=\"form-field\">\r\n\t\t  <label>تعداد فرزندان</label>\r\n\t\t  <Form.Input\r\n            name=\"noGirls\"\r\n            label=\"دختر\"\r\n            placeholder=\"\"\r\n            type=\"text\"\r\n            className=\"form-field\"\r\n          />\r\n\t\t  <Form.Input\r\n            name=\"noBoys\"\r\n            label=\"پسر\"\r\n            placeholder=\"\"\r\n            type=\"text\"\r\n            className=\"form-field\"\r\n          />\r\n\t\t  </Form.Group>\r\n\t\t  <Form.Group inline className=\"form-field\">\r\n\t\t  <label>تعداد خواهر و برادران</label>\r\n\t\t  \r\n\t\t  <Form.Input\r\n            name=\"noSisters\"\r\n            placeholder=\"\"\r\n            type=\"text\"\r\n\t\t\tlabel='خواهر'\r\n          />\r\n\t\t  \r\n\t\t  <Form.Input\r\n            name=\"noBrothers\"\r\n            placeholder=\"\"\r\n            type=\"text\"\r\n\t\t\tlabel='برادر'\r\n          />\r\n\t\t  </Form.Group>\r\n\t\t  <Form.Input\r\n            name=\"hobbies\"\r\n            label=\"علاقه مندی ها\"\r\n            placeholder=\"خواندن کتاب، گوش کردن به موسیقی و...\"\r\n            type=\"text\"\r\n            className=\"form-field\"\r\n          />\r\n\t\t  <Form.Input\r\n            name=\"resistance\"\r\n            label=\"محل زندگی\"\r\n            placeholder=\"تهران\"\r\n            type=\"text\"\r\n            className=\"form-field\"\r\n          />\r\n          <Form.Button className=\"form-field\" primary>\r\n            شروع چت\r\n          </Form.Button>\r\n        </Form>\r\n\t  </div>\r\n    </>\r\n\t)\r\n  }\r\n}\r\n\r\n\r\nconst REGISTERPROFILE = gql`\r\n  mutation registerProfile($name: String!, $age: Int!, $job: String!, $spouseJob: String!) {\r\n    registerProfile(\r\n      registerProfInput: { name: $name, age: $age, job: $job, spouseJob: $spouseJob}\r\n    ) {\r\n      id\r\n      name\r\n      age\r\n      job\r\n      spouseJob\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\n\r\nfunction Register() {\r\n  //const context = useContext(AuthContext);\r\n\r\n  const { onChange, onSubmit, values, setValues, errors, setErrors } = useForm(\r\n    registerHoistedFunction,\r\n    {\r\n      name: \"\",\r\n      age: 0,\r\n      job: \"\",\r\n      spouseJob: \"\",\r\n    }\r\n  );\r\n\r\n  let history = useHistory();\r\n  let { user } = useContext(AuthContext);\r\n  // console.log(user)\r\n\r\n  const [\r\n    registerProf,\r\n    { loading: registerLoading, data: registerData },\r\n  ] = useMutation(REGISTERPROFILE, {\r\n    variables: {\r\n      name: values.name,\r\n      age: Number(values.age),\r\n      job: values.job,\r\n      spouseJob: values.spouseJob,\r\n    },\r\n    onError(error) {\r\n      console.log(JSON.stringify(error, null, 2))\r\n      console.log(values)\r\n      if (!error.graphQLErrors) return;\r\n    setErrors(error&&error.graphQLErrors[0]?error.graphQLErrors[0].extensions.exception.errors:{});\r\n      setValues({\r\n        name: \"\",\r\n        age: 0,\r\n        job: \"\",\r\n        spouseJob: \"\",\r\n      });\r\n    },\r\n    ignoreResults: false,\r\n    onCompleted: (data) => {\r\n      setErrors({});\r\n      setValues({\r\n        name: \"\",\r\n        age: 0,\r\n        job: \"\",\r\n        spouseJob: \"\",\r\n      });\r\n      //context.login(data.register);\r\n    },\r\n  });\r\n  \r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n    if (registerData) {\r\n      interval = setInterval(() => {\r\n        // console.log(history)\r\n        const other = history.location.state.otherUser\r\n        //const other = otherUser.location.state? otherUser.location.state.otherUser: \"\";\r\n        history.push(\"/chat\", { otherUser: other });\r\n        //window.location.href = \"/chatlobby\";\r\n      }, 3000);\r\n    }\r\n    return () => (interval ? clearInterval(interval) : null);\r\n  }, [history, registerData]);\r\n\r\n  function registerHoistedFunction() {\r\n    registerProf();\r\n  }\r\n  /*var chatpro = new ChatProfileForm()\r\n  return chatpro.render()*/\r\n  return (\r\n    <>\r\n      <MenuBar />\r\n      <div className=\"form-container\">\r\n        <Form\r\n          onSubmit={onSubmit}\r\n          loading={registerLoading}\r\n          success={registerData && Object.keys(registerData).length !== 0}\r\n        >\r\n          <h1 className=\"page-title\">پروفایل شما</h1>\r\n          <Form.Input\r\n            name=\"name\"\r\n            label=\"نام\"\r\n            placeholder=\"name\"\r\n            value={values.name}\r\n            type=\"text\"\r\n            autoComplete=\"proname\"\r\n            onChange={onChange}\r\n            error={\r\n              errors.hasOwnProperty(\"profilname\") && {\r\n                content: errors.profilname,\r\n                pointing: \"above\",\r\n              }\r\n            }\r\n            className=\"form-field\"\r\n          />\r\n          <Form.Input\r\n            name=\"age\"\r\n            label=\"سن\"\r\n            placeholder=\"age\"\r\n            value={values.age}\r\n            type=\"number\"\r\n            autoComplete=\"age\"\r\n            onChange={onChange}\r\n            className=\"form-field\"\r\n          />\r\n          <Form.Input\r\n            name=\"job\"\r\n            label=\"شغل\"\r\n            placeholder=\"occupation\"\r\n            type=\"text\"\r\n            autoComplete=\"occupation\"\r\n            value={values.job}\r\n            onChange={onChange}\r\n            error={\r\n              errors.hasOwnProperty(\"profiljob\") && {\r\n                content: errors.profiljob,\r\n                pointing: \"above\",\r\n              }\r\n            }\r\n            className=\"form-field\"\r\n          />\r\n          <Form.Select \r\n            label='وضعیت تاهل'\r\n            options={mariageOptions}\r\n            placeholder='وضعیت خود را انتخاب کنید'\r\n\t\t\t      className=\"form-field\"\r\n          />\r\n\t\t  <Form.Input\r\n            name=\"spouseJob\"\r\n            label=\"شغل همسر\"\r\n            placeholder=\"spouse occupation\"\r\n            type=\"text\"\r\n            autoComplete=\"occupation\"\r\n            value={values.spouseJob}\r\n            onChange={onChange}\r\n            error={\r\n              errors.hasOwnProperty(\"profilspjob\") && {\r\n                content: errors.profilspjob,\r\n                pointing: \"above\",\r\n              }\r\n            }\r\n            className=\"form-field\"\r\n          />\r\n\t\t  <Form.Group inline className=\"form-field\">\r\n\t\t  <label>تعداد فرزندان</label>\r\n\t\t  <Form.Input\r\n            name=\"noGirls\"\r\n            label=\"دختر\"\r\n            placeholder=\"\"\r\n            type=\"text\"\r\n            className=\"form-field\"\r\n          />\r\n\t\t  <Form.Input\r\n            name=\"noBoys\"\r\n            label=\"پسر\"\r\n            placeholder=\"\"\r\n            type=\"text\"\r\n            className=\"form-field\"\r\n          />\r\n\t\t  </Form.Group>\r\n\t\t  <Form.Group inline className=\"form-field\">\r\n\t\t  <label>تعداد خواهر و برادران</label>\r\n\t\t  \r\n\t\t  <Form.Input\r\n            name=\"noSisters\"\r\n            placeholder=\"\"\r\n            type=\"text\"\r\n\t\t\tlabel='خواهر'\r\n          />\r\n\t\t  \r\n\t\t  <Form.Input\r\n            name=\"noBrothers\"\r\n            placeholder=\"\"\r\n            type=\"text\"\r\n\t\t\tlabel='برادر'\r\n          />\r\n\t\t  </Form.Group>\r\n\t\t  <Form.Input\r\n            name=\"prohob\"\r\n            label=\"علاقه مندی ها\"\r\n            placeholder=\"خواندن کتاب، گوش کردن به موسیقی و...\"\r\n            type=\"text\"\r\n            className=\"form-field\"\r\n        />\r\n        <Form.Input\r\n            name=\"prores\"\r\n            label=\"محل زندگی\"\r\n            placeholder=\"تهران\"\r\n            type=\"text\"\r\n            className=\"form-field\"\r\n        />\r\n        {/* {console.log(values)} */}\r\n        {registerData && (\r\n            <Message\r\n              success\r\n              //header={`خوش آمدید!`}\r\n              content={`اطلاعات پروفایل شما با موفقیت در سیستم ثبت شد...`}\r\n              className=\"form-field\"\r\n            />\r\n         )}\r\n        <Form.Button className=\"form-field\" primary>\r\n          شروع چت\r\n        </Form.Button>\r\n      </Form>\r\n    </div>\r\n  </>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default Register;\r\n","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\util\\hooks.js",[],"D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\components\\ChatPrizeProgress.js",["174","175","176","177","178","179","180"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { Menu } from \"semantic-ui-react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\n\r\nimport { AuthContext } from \"../context/auth\";\r\nimport \"./styles/PrizeBar.css\";\r\nconst BarCard = ({ totalPoints, remaining, prize }) => {\r\n  return (\r\n    <div class=\"timeline__cards\">\r\n      <div class=\"timeline__card card\">\r\n        <header class=\"card__header\">\r\n          <time class=\"time\" dateTime=\"2008-09-01\">\r\n            <span class=\"time__month\">اکنون</span>\r\n          </time>\r\n          <h3 class=\"card__title r-title\">\r\n            <p>{prize} </p>\r\n          </h3>\r\n        </header>\r\n        <div class=\"card__content\">\r\n          <p>{remaining} : امتیاز مانده تا جایزه‌ی بعدی</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nconst PrizesBar = ({ totalPoints }) => {\r\n  const { user, logout } = useContext(AuthContext);\r\n  const getRemainingPontsToNext = () => {\r\n    return parseInt(5000 - (totalPoints % 5000));\r\n  };\r\n\r\n  const getPrizeIndex = () => {\r\n    return parseInt(totalPoints / 5000);\r\n  };\r\n  const prizeIndex = getPrizeIndex();\r\n  return (\r\n    <div class=\"timeline__page\">\r\n      <div className=\"timeline__title\">\r\n        {\" \"}\r\n        {totalPoints} :مجموع امتیازات کاربران\r\n      </div>\r\n      {prizeIndex === 4 && (\r\n        <BarCard\r\n          totalPoints={totalPoints}\r\n          remaining={getRemainingPontsToNext()}\r\n          prize={\"۱ ميليون و ۵۰۰ هزار تومان\"}\r\n        />\r\n      )}\r\n      <div class=\"timeline\">\r\n        <div class=\"timeline__group\">\r\n          <div class=\"timeline__year time\" aria-hidden=\"true\">\r\n            <span className=\"year__upper\">{\"۱ ميليون و ۵۰۰ هزار تومان\"}</span>\r\n            <br />\r\n            <span className=\"year__lower\">{\"۲۰ هزار امتیاز\"}</span>\r\n          </div>\r\n          {prizeIndex === 3 && (\r\n            <BarCard\r\n              totalPoints={totalPoints}\r\n              remaining={getRemainingPontsToNext()}\r\n              prize={\"۱ ميليون تومان\"}\r\n            />\r\n          )}\r\n        </div>\r\n        <div class=\"timeline__group\">\r\n          <div class=\"timeline__year time\" aria-hidden=\"true\">\r\n            <span className=\"year__upper\">{\"۱ ميليون تومان\"}</span>\r\n            <br />\r\n            <span className=\"year__lower\"> {\"۱۵ هزار امتیاز\"}</span>\r\n          </div>\r\n\r\n          {prizeIndex === 2 && (\r\n            <BarCard\r\n              totalPoints={totalPoints}\r\n              remaining={getRemainingPontsToNext()}\r\n              prize={\"۷۰۰ هزار تومان\"}\r\n            />\r\n          )}\r\n        </div>\r\n        <div class=\"timeline__group\">\r\n          <div class=\"timeline__year time\" aria-hidden=\"true\">\r\n            <span className=\"year__upper\">{\"۷۰۰ هزار تومان\"}</span>\r\n            <br />\r\n            <span className=\"year__lower\"> {\"۱۰ هزار امتیاز\"}</span>\r\n          </div>\r\n\r\n          {prizeIndex === 1 && (\r\n            <BarCard\r\n              totalPoints={totalPoints}\r\n              remaining={getRemainingPontsToNext()}\r\n              prize={\"۵۰۰ هزار تومان\"}\r\n            />\r\n          )}\r\n        </div>\r\n        <div class=\"timeline__group\">\r\n          <div class=\"timeline__year time\" aria-hidden=\"true\">\r\n            <span className=\"year__upper\">{\"۵۰۰ هزار تومان\"}</span>\r\n            <br />\r\n            <span className=\"year__lower\"> {\"۵ هزار امتیاز\"}</span>\r\n          </div>\r\n\r\n          {prizeIndex === 0 && (\r\n            <BarCard\r\n              totalPoints={totalPoints}\r\n              remaining={getRemainingPontsToNext()}\r\n              prize={\"۲۰۰ هزار تومان\"}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PrizesBar;\r\n","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\components\\ChatLeaderBoard.js",["181","182","183"],"import React, { useEffect, useState, useContext } from \"react\";\r\n\r\nimport \"./styles/ChatLeaderBoard.css\";\r\nconst ChatLeaderBoad = ({ leaderboardData, username }) => {\r\n  if (!leaderboardData) return <div></div>;\r\n  const userIndex = leaderboardData.findIndex(\r\n    (entry) => entry.username === username\r\n  );\r\n\r\n  return (\r\n    <div class=\"leaderboard-card \">\r\n      <section class=\"card-info card-section\">\r\n        {username && leaderboardData[userIndex] ? (\r\n          <>\r\n            <section class=\"user row\">\r\n              <h1 class=\"user-header\">{username}</h1>\r\n            </section>\r\n            <section class=\"statistics\">\r\n              <article class=\"statistic\">\r\n                <h4 class=\"statistic-title\">امتیاز شما</h4>\r\n                <h3 class=\"statistic-value\">\r\n                  {leaderboardData[userIndex].totalPoints}\r\n                </h3>\r\n              </article>\r\n            </section>\r\n            <div class=\"dial\">\r\n              <h3 class=\"dial-value\">رتبه</h3>\r\n              <h2 class=\"dial-value\">{userIndex + 1}</h2>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <div className=\"please-login\">برای استفاده از فضای چت وارد شوید</div>\r\n        )}\r\n      </section>\r\n      <section class=\"card-details card-section\">\r\n        <nav class=\"menu\">\r\n          <article class=\"menu-item menu-item-active\">جدول امتیازات</article>\r\n        </nav>\r\n\r\n        <dl class=\"leaderboard\">\r\n          {leaderboardData.map((value, index) => {\r\n            return (\r\n              <div className=\"leaderboard-row\">\r\n                <div className=\"leaderboard-col1\">{index + 1}</div>\r\n                <div className=\"leaderboard-col2\">{value.username}</div>\r\n                <div className=\"leaderboard-col2\">{value.totalPoints}</div>\r\n              </div>\r\n            );\r\n          })}\r\n        </dl>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\nexport default ChatLeaderBoad;\r\n","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\util\\ChatValidations.js",["184","185"],"import persianRex from \"persian-rex\";\r\n\r\nimport { Base64 } from \"js-base64\";\r\nconst MIN_WORDS = 2;//3;\r\nconst MAX_WORDS = 28;//25;\r\nconst MIN_CHARS = 3;\r\nconst MAX_CHARS = 125;//120;\r\nconst MAX_DUPLICATE_WORD_PERCENTAGE = 40;\r\nconst BAD_WORDS = [\r\n  \"2obYsw==\",\r\n  \"2q/ZiNiy\",\r\n  \"2YTYrNmG\",\r\n  \"2qnYq9in2YHYqg==\",\r\n  \"2KjbjCDYtNix2YE=\",\r\n  \"2KjbjNi02LnZiNix\",\r\n  \"2q/ZiNmH\",\r\n  \"2qnZiNmG\",\r\n  \"2qnbjNix24w=\",\r\n  \"2qnYs9qp2LQ=\",\r\n  \"2KjbjCDZhtin2YXZiNiz\",\r\n  \"2LParyDZvtiv2LE=\",\r\n  \"2b7Yr9ix2LParw==\",\r\n  \"2LTYp9i0\",\r\n  \"2LHbjNiv2YY=\",\r\n  \"2LHbjNiv24w=\",\r\n  \"2qnZiNmG24w=\",\r\n  \"2K/bjNmI2LM=\",\r\n  \"2KfZhtuM\",\r\n  \"2q/Zh9uM\",\r\n  \"2KjbjCDZvtiv2LE=\",\r\n  \"2YXYp9iv2LHYs9qv\",\r\n  \"2KjbjCDZhtin2YXZiNiz\",\r\n  \"2KzZhtiv2Yc=\",\r\n  \"2q/Yp9uM2K/bjA==\",\r\n  \"2q/Yp9uM2K/Zhg==\",\r\n  \"2qnbjNix\",\r\n  \"2qnbjNix2Yjaqdiz\",\r\n  \"2LnZhdiq2Yg=\",\r\n  \"2K7ZgdmHINi02Yg=\",\r\n  // \"2K7ZgdmH\",\r\n  \"2K7ZgdmHINiu2YjZhg==\",\r\n  \"2YXYsdi2INiv2KfYsduM\",\r\n  \"2YXYsdi22K/Yp9ix24w=\",\r\n  \"2q/Ysdiv2YYg2K/Ysdin2LI=\",\r\n  // \"2K7YsduM\",\r\n  // \"2q/Yp9mI24w=\",\r\n  // \"2KfYs9io24w=\",\r\n  // \"2LPar9uM\",\r\n  // \"2K3bjNmI2KfZhtuM\",\r\n  \"2K/Zh9mG2KrZiNio2KjZhtiv\",\r\n  \"2KfZhtqv2YQ=\",\r\n  \"2KLYtNi62KfZhA==\",\r\n  \"2K7YsdmB2Ko=\",\r\n  \"2b7ZvtmH\",\r\n  // \"2K7Zhtqv\",\r\n  // \"2K/aqdmE\",\r\n  // \"2K/ZhNmH\",\r\n  \"2YLYsdiq24w=\",\r\n  \"2q/ZiNiy2Yg=\",\r\n  \"2qnZiNmG2K/Zhw==\",\r\n  \"2qnZiNmGINiv2Yc=\",\r\n  \"2q/Yp9qv2YjZhA==\",\r\n  \"2KfYqNmE2Yc=\",\r\n  \"2q/Zhtiv2Ycg2q/ZiNiy\",\r\n  // \"2qnYsw==\",\r\n  \"2qnZhNmHINqp24zYsduM\",\r\n  // \"2q/YtNin2K8=\",\r\n  \"2K/Yrtiq2LHZgtix2KrbjA==\",\r\n  \"2K7ZiNin2YfYsdis2YbYr9mH\",\r\n  \"2YXYp9iv2LHYrNmG2K/Zhw==\",\r\n  \"2YTYrtiq\",\r\n  \"2KjYrtmI2LHYtA==\",\r\n  \"2KjZvtix2LPYsdi0\",\r\n  \"2KjZvtix2LHZiNi0\",\r\n  \"2KjbjNin2KjYrtmI2LHYtA==\",\r\n  \"2YXbjNiu2YjYsduM2LQ=\",\r\n  \"2KjZhdin2YQ=\",\r\n  \"2K/bjNmI2LMg2K7Yp9mG\",\r\n  \"2LLYsdmG2LLZhg==\",\r\n  // \"2LLZhti02Yg=\",\r\n  // \"2LLZhtiq2Yg=\",\r\n  \"2LLZhiDYrNmG2K/Zhw==\",\r\n  \"2KjaqdmG2YXYqg==\",\r\n  // \"2KjaqdmG\",\r\n  \"2KjaqdmGINiq2YjYtA==\",\r\n  \"2KjaqdmG2LQ=\",\r\n  \"2YTYsg==\",\r\n  \"2LPaqdiz\",\r\n  \"2LPaqdiz24w=\",\r\n  \"2LPYp9qp\",\r\n  \"2LPYp9qpINio2LLZhg==\",\r\n  \"2b7ZiNix2YY=\",\r\n  \"2LPaqdiz24zbjA==\",\r\n  \"2qnZiNmG2YY=\",\r\n  \"2qnbjNix2LE=\",\r\n  \"2KzYp9qp2LQ=\",\r\n  \"2KfZhtuM\",\r\n  // \"2KjYr9io2K7Yqg==\",\r\n  \"2K7Yp9uM2Yc=\",\r\n  \"2K7Yp9uM2Ycg2YXYp9mE\",\r\n  \"2K7Yp9uM2Ycg2K7ZiNix\",\r\n  \"2YXZhdmH\",\r\n  \"2YXZhdmHINiu2YjYsQ==\",\r\n  \"2K/Yrtiq2LHYrNmG2K/Zhw==\",\r\n  \"2K7Yp9ix2qnYs9iv2Yc=\",\r\n  \"2qnYsyDZhtmG2Ko=\",\r\n  \"2qnbjNix2K/ZiNiz\",\r\n  \"2YXYp9iv2LHaqdmI2YbbjA==\",\r\n  \"2K7Yp9ix2qnYs9iv2Yc=\",\r\n  \"2K7Yp9ix2qnYsyDYr9mH\",\r\n  \"2qnbjNix2Yjaqdiz\",\r\n  \"2qnYsyDZiCDaqduM2LE=\",\r\n  \"2LLZhtin\",\r\n  \"2LLZhtin2LLYp9iv2Yc=\",\r\n  \"2YjZhNiv2LLZhtin\",\r\n  \"2YXZhNmG2q8=\",\r\n  \"2LPYp9iv24zYs9mF24w=\",\r\n  \"2YHYp9it2LTZhw==\",\r\n  \"2K7Yp9mG2YUg2KzZhtiv2Yc=\",\r\n  \"2YHYp9it2LTZhyDYrtin2YbZhQ==\",\r\n  \"2LPbjNqp2KrbjNix\",\r\n  \"2LPYs9qp24w=\",\r\n  \"2qnYsyDYrtuM2LM=\",\r\n  \"2K3YtNix24w=\",\r\n  \"2q/Yp9uM24zYr9mG\",\r\n  \"2Kjaqdin2LHYqg==\",\r\n  \"2K/Yp9m\",\r\n  \"2KjahtmHINqp2YjZhtuM\",\r\n  \"2qnYs9i02LnYsQ==\",\r\n  \"2LPYsdqp24zYsQ==\",\r\n  \"2LPZiNix2KfYriDaqdmI2YY=\",\r\n  \"2K3YtNix24wg2LTYr9mG\",\r\n  \"2qnYsyDaqdix2K/Zhg==\",\r\n  \"2qnYsyDYr9in2K/Zhg==\",\r\n  \"2KjaqdmGINio2qnZhg==\",\r\n  \"2LTZgiDaqdix2K/Zhg==\",\r\n  \"2qnYsyDZhNuM2LPbjNiv2YY=\",\r\n  \"2KLYqCDaqduM2LE=\",\r\n  \"2KzYp9qp2LQ=\",\r\n  \"2KzZhNmCINiy2K/Zhg==\",\r\n  \"2KzZhtiv2Ycg2K7Yp9mG2Yc=\",\r\n  \"2LTZh9mI2KrbjA==\",\r\n  \"2LnZhg==\",\r\n  \"2YLYsw==\",\r\n  \"2qnYsdiv2YY=\",\r\n  \"2qnYsdiv2YbbjA==\",\r\n  \"2qnYsyDZhNuM2LM=\",\r\n  \"2qnYsyDaqdi0\",\r\n  \"2qnZiNiz\",\r\n  \"2qnbjNix2YXaqduM2K/Zhg==\",\r\n  \"2YTYp9qp2YjZhtuM\",\r\n  \"2b7Ys9iq2KfZhg==\",\r\n  \"2KLZhNiq\",\r\n  \"2KLZhNiqINiq2YbYp9iz2YTbjA==\",\r\n  \"2YbYsdqp2K/Zhw==\",\r\n  \"2YXYp9mE2YjZhtiv2YY=\",\r\n  \"2LPZiNmE2KfYrg==\",\r\n  \"2KzZhtiz24w=\",\r\n  \"2K/ZiNis2YbYs9mH\",\r\n  \"2LParyDYqtmIINix2YjYrdiq\",\r\n  \"2KjbjCDYutuM2LHYqg==\",\r\n  \"2YbYudi02Yc=\",\r\n  \"2KjbjCDYudmB2Ko=\",\r\n  \"2YXYp9iv2LHZgtmH2YjZhw==\",\r\n  \"2b7ZhNi02Ko=\",\r\n  \"2b7YsduM2YjYrw==\",\r\n  \"2qnZhNmHINqp24zYsduM\",\r\n  \"2qnbjNix2YbYp9iy\",\r\n  \"2b7YtNmF2KfZhQ==\",\r\n  \"2YTYrtiq24w=\",\r\n  \"2qnYs9qp24zYsQ==\",\r\n  // \"2K/ZiNiz2Kog2K/Yrtiq2LE=\",\r\n  // \"2K/ZiNiz2Kog2b7Ys9ix\",\r\n  \"2qnZiNmG2LTZiA==\",\r\n  \"2K/ZiNmE\",\r\n  \"2LTZhtqv2YjZhA==\",\r\n  \"2qnbjNix2K/Ysdin2LI=\",\r\n  \"2K/Yp9mBINmG2KfYsg==\",\r\n  \"2LPaqdiz24zZhQ==\",\r\n  \"2qnZiNi1\",\r\n  \"2LPYp9qp2YjZhtuM\",\r\n  \"2qnZiNmGINqv2YbYr9mH\",\r\n  \"2LPaqdiz24wg2KjYp9i0\",\r\n  \"2qnYs9iu2YQ=\",\r\n  \"2LXbjNi62Ycg2KfbjA==\",\r\n  \"2q/ZiNi0INiv2LHYp9iy\",\r\n  \"2K/Ysdin2LLar9mI2LQ=\",\r\n  \"2KrZiNmE2Ycg2LParw==\",\r\n  // \"2K7Ysg==\",\r\n  // \"2YXYp9qG\",\r\n  \"2YXYp9qGINqp2LHYr9mG24w=\",\r\n  \"2KfYs9qp2YQ=\",\r\n  \"2YfbjNiy\",\r\n  \"2KjbjNmG2KfZhdmI2LM=\",\r\n  \"2KfZiNiz2qnZhA==\",\r\n  \"2KjbjCDYotio2LHZiA==\",\r\n  \"2YTYp9i024w=\",\r\n  \"2YTYp9i0INqv2YjYtNiq\",\r\n  \"2KjYp9iz2YY=\",\r\n  \"2Kzaqdiz\",\r\n  \"2LParyDYtdmB2Ko=\",\r\n  \"2qnYtdqp2LQ=\",\r\n  \"2YXYtNix2YjYqA==\",\r\n  \"2LnYsdmCINiu2YjYsQ==\",\r\n  \"2LPaqdizINqG2Ko=\",\r\n  // \"2KzZiNmI2YY=\",\r\n  \"2LPYsdiu2YjYsQ==\",\r\n  \"2qnZhNmB2Ko=\",\r\n  \"2K3YtNix\",\r\n  \"2YTYp9iz\",\r\n  \"2LLYp9ix2Ko=\",\r\n  // \"2LHYtNiq24w=\",\r\n  // \"2KrYsdqp\",\r\n  // \"2YHYp9ix2LM=\",\r\n  // \"2YTYsQ==\",\r\n  // \"2LnYsdio\",\r\n  \"2K7YsQ==\",\r\n  \"2q/Yp9mI\",\r\n  // \"2KfYs9io\",\r\n  \"2q/ZiNiz2YHZhtiv\",\r\n  \"2qnYsdmF\",\r\n  \"2KfZhNin2YI=\",\r\n  \"2KfZhNin2Lo=\",\r\n  \"2KfYrdmF2YI=\",\r\n  \"2KjbjCDYtNi52YjYsQ==\",\r\n  \"2K3YsdmI2YXYstin2K/Zhw==\",\r\n  \"2qnZiNmG24w=\",\r\n  \"2q/Zhw==\",\r\n  \"2YXYp9iv2LEg2KzZhtiv2Yc=\",\r\n  \"2qnYqw==\",\r\n  \"2qnYtQ==\",\r\n  \"2b7Ys9mI2YY=\",\r\n  \"2K7Yp9ix2qnYs9mR2Yc=\",\r\n  \"2K/Zh9mGINqv2KfbjNuM2K/Zhw==\",\r\n  \"2K/Zh9mGINiz2LHZiNuM2LM=\",\r\n  \"2b7Yr9ixINiz2q8=\",\r\n  \"2b7Yr9ixINiz2YjYrtiq2Yc=\",\r\n  \"2b7Yr9ixINi12YTZiNin2KrbjA==\",\r\n  \"2YTYp9mF2LXYqA==\",\r\n  \"2LLZhtuM2qnZhw==\",\r\n  \"2YXYsdiq24zaqdmH\",\r\n  \"2YXYsdiv24zaqdmH\",\r\n  \"2KjbjCDYrtin24zZhw==\",\r\n  \"2LnZiNi224w=\",\r\n  \"2KfYs9qv2YQ=\",\r\n  \"2KfZiNiz2qnZhA==\",\r\n  \"2KfZiNiz2q/ZhA==\",\r\n  \"2KfZiNi12q/ZhA==\",\r\n  \"2KfZiNi12qnZhA==\",\r\n  \"2K/bjNmI2Ks=\",\r\n  \"2K/bjNmI2LU=\",\r\n  \"2YLYsdmF2LXYp9mC\",\r\n  \"2YLYsdmF2LPYp9mC\",\r\n  \"2LrYsdmF2LPYp9mC\",\r\n  \"2LrYsdmF2LXYp9mC\",\r\n  \"2YHbjNmE2YUg2LPZiNm+2LE=\",\r\n  \"2obYp9mC2KfZhA==\",\r\n  \"2obYp9i62KfZhA==\",\r\n  \"2obYsyDYrtmI2LE=\",\r\n  \"2qnYsyDYrtmI2LE=\",\r\n  \"2qnYsyDYrtmE\",\r\n  \"2qnZiNizINiu2YjYsQ==\",\r\n  \"2qnZiNizINiu2YQ=\",\r\n  \"2qnYtSDZhNuM2LM=\",\r\n  \"2qnYqyDZhNuM2LM=\",\r\n  \"2qnYsyDZhNuM2LM=\",\r\n  \"2qnZiNi1INmE24zYsw==\",\r\n  \"2qnZiNirINmE24zYsw==\",\r\n  \"2qnZiNizINmE24zYsw==\",\r\n  \"2qnZiNmGINiz2YjYsdin2K4=\",\r\n  \"2LPZiNix2KfYriDaqdmI2YY=\",\r\n  \"2qnZiNmGINm+2YbbjNix\",\r\n  \"2LParyDYr9mH2YY=\",\r\n  \"2KzYp9qp2LQ=\",\r\n  \"2q/ZiNmH\",\r\n  \"2KrYrtmFINiz2q8=\",\r\n  \"2LXbjNqp\",\r\n  \"2q/ZiNiyINio2KfZgtin2YTZig==\",\r\n  \"2YTYp9i024w=\",\r\n  \"2Ybaqdio2Ko=\",\r\n  \"2LnZhtiq2LE=\",\r\n  \"2b7ZgduM2YjYsg==\",\r\n  \"2LnZhg==\",\r\n  \"2LnZhiDYqtix\",\r\n  \"2K7Yp9uM2Ycg2YXYp9mE\",\r\n  \"2LTZiNix2KrZhSDZhdin2LPaqdiq\",\r\n  \"2KfYs9qp2YQ=\",\r\n  \"2q/ZiNiy2Yg=\",\r\n  \"2KfYs9qv2YjZhA==\",\r\n  \"2LnZhdmHINmG2YbZhw==\",\r\n  \"2qnZiNmGINiq2b7ZhA==\",\r\n  \"2KrYrtmF24w=\",\r\n  \"2K/Zh9mG2Kog2LPYsdmI24zYsw==\",\r\n  \"2LLYqNin2YTZhw==\",\r\n  \"2YTYpyDZvtin\",\r\n  \"2Ybar9in24zbjNiv2YU=\",\r\n  \"2KjZhyDaqduM2LHZhQ==\",\r\n  \"2KjZhyDYqtiu2YXZhQ==\",\r\n  \"2KjZhyDahtm+2YU=\",\r\n  \"2K/Yp9qvINin2LPYqtin24zZhNqp2YjZhtiv2Ycg2K7Yp9ix\",\r\n  \"2qnZiNmG2K/ZhyDYrtmI2KfYsQ==\",\r\n  \"2KzbjNmG2K/Ypw==\",\r\n  \"2qnYp9iz2qnYtA==\",\r\n  \"2LLZhiDaqdin2LPYr9mH\",\r\n  \"2LLZhiDYrNmG2K/Zhw==\",\r\n  \"2LLZhtinINiy2KfYr9mH\",\r\n  \"24zYqNmGINiy2YbYpw==\",\r\n  \"2KfYqNmGINuM2LLbjNiv\",\r\n  \"2YHYp9qpINmB24zYsw==\",\r\n  \"2K7bjCDaqdin2LM=\",\r\n  \"2q/bjCDYstmG\",\r\n  \"2q/bjNiu2YjYp9ix\",\r\n];\r\n\r\n// async function CheckQIsDirect(content){\r\n//   var is_direct = false;\r\n//   request.post(\r\n//     'http://localhost:5000',\r\n//     { json: { 'utterance': content } },\r\n//     function (error, response, body) {\r\n//         if (!error && response.statusCode == 200) {\r\n//           is_direct = body.direct\r\n//           // setDirect(body.direct)\r\n//           console.log('is_direct inside post: '+is_direct)\r\n//           console.log(body)\r\n//           return is_direct\r\n//         }\r\n//     }\r\n//   ).then();\r\n//   // return is_direct\r\n// }\r\n\r\n\r\nconst isContentValid = (content) => {\r\n  const words = content.split(\" \");\r\n  let error = null;\r\n  let isValid = true;\r\n  if (!(words.length >= MIN_WORDS))\r\n    return `لطفاً جملاتی بلند‌تر از ${MIN_WORDS - 1} کلمه انتخاب کنید`;\r\n  if (!(words.length <= MAX_WORDS))\r\n    return `لطفاً جملاتی کوتاه‌تر از ${MAX_WORDS} کلمه انتخاب کنید`;\r\n  if (!(content.length >= MIN_CHARS))\r\n    return `لطفاً جملاتی بلند‌تر از ${MIN_CHARS} حرف انتخاب کنید`;\r\n  if (!(content.length <= MAX_CHARS))\r\n    return `لطفاً جملاتی کوتاه‌تر از ${MAX_CHARS} حرف انتخاب کنید`;\r\n  const wordMap = {};\r\n  words.forEach((element) => {\r\n    if (!wordMap[element]) wordMap[element] = 1;\r\n    else wordMap[element]++;\r\n  });\r\n  if (\r\n    words.some(\r\n      (w) => wordMap[w] / words.length > MAX_DUPLICATE_WORD_PERCENTAGE / 100\r\n    ) &&\r\n    words.length >= 4\r\n  )\r\n    return `لطفاً از تکرار کلمات بپرهیزید`;\r\n  if (!persianRex.hasLetter.test(content))\r\n    return `لطفاً از جملات فارسی استفاده کنید`;\r\n\r\n  if (words.some((w) => BAD_WORDS.includes(Base64.encode(w))))\r\n    return `لطفاً از استفاده از کلمات نامناسب بپرهیزید`;\r\n\r\n  return null;\r\n};\r\n\r\nexport default isContentValid;\r\n","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\chat\\RegisterProfile.js",["186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227"],"import React, {useEffect, useState} from \"react\";\r\nimport {Form, Input, Button} from \"semantic-ui-react\";\r\nimport {gql, useQuery} from \"@apollo/client\";\r\nimport client from \"../../ApolloProvider\";\r\nimport \"./Chat.css\";\r\nimport { openSuccessSnack, openErrorSnack } from \"../../components/SnackBar\";\r\nimport path from 'path';\r\nimport {check} from '../chat/CheckProfileItem';\r\n\r\n// const __filename = fileURLToPath();\r\nconst __dirname = path.resolve();//path.dirname(__filename);\r\n// console.log('dirname is: ');\r\n// console.log(__dirname);\r\n\r\nconst REGISTER_PROFILE = gql`\r\n  mutation PostReceiverProfile($chatId: String!, $profilePoint:Int!, $age:Int, $job:String, $spouseJob: String, $fatherJob: String, $motherJob: String, $name:String!\r\n    $gender:Boolean, $noSiblings:Int, $noSisters:Int, $noBrothers:Int, $noChildren:Int, $noGirls:Int, $noBoys:Int, $mariageStatus:String,\r\n    $hobby:String, $favBook:String, $favFilm:String, $favDish:String, $resistance:String){\r\n    postReceiverProfile(chatId: $chatId, profilePoint: $profilePoint, age:$age, job:$job, spouseJob: $spouseJob, fatherJob:$fatherJob, motherJob: $motherJob, name:$name\r\n        gender:$gender, noSiblings:$noSiblings, noSisters:$noSisters, noBrothers:$noBrothers, noChildren:$noChildren, noGirls:$noGirls, noBoys:$noBoys\r\n        , mariageStatus:$mariageStatus, hobby: $hobby, favBook: $favBook, favFilm:$favFilm, favDish:$favDish, resistance:$resistance) \r\n  }\r\n`;\r\n\r\nconst GET_PROFILEPOINTS = gql`\r\n  query GetProfilePoint($messageColl_id:ID!){\r\n    getProfilePoint(messageColl_id: $messageColl_id)\r\n  }\r\n`;\r\n\r\nconst openSnackAsync = async (text) => {\r\n    openSuccessSnack(text);\r\n};\r\nconst openSnackError = async (text) =>{\r\n    openErrorSnack(text);\r\n};\r\n\r\nfunction removeSpace(inpTxt) {\r\n    const str = inpTxt.split('');\r\n    str.forEach((item, index) => {\r\n     const charCode = item.charCodeAt(0);\r\n     if (charCode === 32 || charCode === 8204) {\r\n       str[index] = '';\r\n     }\r\n    });\r\n    inpTxt = str.join('');\r\n    return inpTxt;\r\n}\r\n\r\nfunction evaluateProfile(predict, real){\r\n    var points = 0\r\n    if(removeSpace(predict.name) == removeSpace(real.name)) points+=1\r\n    if(predict.age && real.age && predict.age==real.age) points+=1\r\n    if((\"gender\" in predict) && real.gender!=null && predict.gender==real.gender) points+=1\r\n    if(predict.mariageStatus && real.mariageStatus && predict.mariageStatus.trim()==real.mariageStatus.trim()) points+=1\r\n    if(predict.noChilren && real.noChilren && predict.noChilren==real.noChilren) points+=1\r\n    if(predict.noBoys && real.noBoys && predict.noBoys==real.noBoys) points+=1\r\n    if(predict.noGirls && real.noGirls && predict.noGirls==real.noGirls) points+=1\r\n    // console.log('predict.noSiblings is: ')\r\n    // console.log(predict.noSiblings)\r\n    // console.log('real.noSiblings is: ')\r\n    // console.log(real.noSiblings)\r\n    // console.log('predict.noSiblings==real.noSiblings: ')\r\n    // console.log(predict.noSiblings==real.noSiblings)\r\n    if(predict.noSiblings && real.noSiblings && predict.noSiblings==real.noSiblings) points+=1\r\n    if(predict.noSisters && real.noSisters && predict.noSisters==real.noSisters) points+=1\r\n    if(predict.noBrothers && real.noBrothers && predict.noBrothers==real.noBrothers) points+=1\r\n    // if(predict.favBook && real.favBook && removeSpace(predict.favBook.replace('کتاب',''))==removeSpace(real.favBook)) points+=1\r\n    // if(predict.favFilm && real.favFilm && removeSpace(predict.favFilm.replace('فیلم',''))==removeSpace(real.favFilm)) points+=1\r\n    // if(predict.favDish && real.favDish && removeSpace(predict.favDish.replace('غذای',''))==removeSpace(real.favDish)) points+=1\r\n  \r\n    if(predict.job && real.job) {const res=check(real.job, predict.job,'job'); points+=res; }\r\n    // if(predict.spouseJob && real.spouseJob) {const res=check(real.spouseJob, predict.spouseJob,'job'); points+=res;}\r\n    // if(predict.fatherJob && real.fatherJob) {const res=check(real.fatherJob, predict.fatherJob,'job'); points+=res;}\r\n    // if(predict.motherJob && real.motherJob) {const res=check(real.motherJob, predict.motherJob,'job'); points+=res;}\r\n    if(predict.hobby && real.hobby) {const res=check(real.hobby, predict.hobby,'hobby'); points+=res;}\r\n    if(predict.resistance && real.resistance) {const res=check(real.resistance, predict.resistance,'resistance'); points+=res;}//&& removeSpace(predict.resistance)==removeSpace(real.resistance)) points+=1\r\n    return points\r\n}\r\n\r\nfunction ProfileEditer({chatId, predictProfile, receiverProfile}) {\r\n    const maxProfileScore = (receiverProfile.mariageStatus && receiverProfile.mariageStatus==\"married\"? 13:11)\r\n    // console.log('chatId')\r\n    // console.log(chatId)\r\n    const [profilePoint, setprofilePoint] = React.useState(0);\r\n    const pointQuery = useQuery(GET_PROFILEPOINTS, {variables:{messageColl_id: chatId},\r\n      onCompleted: (data) => {\r\n        setprofilePoint(data.getProfilePoint);\r\n      },\r\n      fetchPolicy: \"no-cache\",\r\n    });\r\n\r\n    const [state, setState] = useState({name: '', jobs: [], counts: [], gender:'', mariageStatus: '', favs: [], age:0, resistance: ''});\r\n\r\n    // console.log('predictProfile')\r\n    // console.log(predictProfile)\r\n    // console.log('receiverProfile')\r\n    // console.log(receiverProfile)\r\n\r\n    // const [initState, setInitState]=useState(false)\r\n    const initValues_name = (predictProfile!=null && predictProfile!=false ? predictProfile.name: \"\")\r\n    const initAge = (predictProfile!=null && predictProfile!=false && predictProfile.age!=null ? predictProfile.age: \"\")\r\n    const initResist = (predictProfile!=null && predictProfile!=false && predictProfile.resistance!=null ? predictProfile.resistance: \"\")\r\n    var initValues_gender = \"\" \r\n    if(predictProfile!=null && predictProfile!=false){ \r\n    if(predictProfile.gender==true) {\r\n    initValues_gender=\"ma\"\r\n    }else if(predictProfile.gender==false){\r\n    initValues_gender=\"fe\"\r\n    }\r\n    }\r\n    const initMarigage = (predictProfile!=null && predictProfile!=false && predictProfile.mariageStatus!=null ? predictProfile.mariageStatus: \"\")\r\n    //console.log(initValues_name)\r\n    const initJobs = []\r\n    if(predictProfile!=null && predictProfile.job!=null){ initJobs.push({jobPerson:\"job\", jobTitle:predictProfile.job}) };\r\n    // if(predictProfile!=null && predictProfile.spouseJob!=null){ initJobs.push({jobPerson:\"spouseJob\", jobTitle:predictProfile.spouseJob}) };\r\n    // if(predictProfile!=null && predictProfile.fatherJob!=null){ initJobs.push({jobPerson:\"fatherJob\", jobTitle:predictProfile.fatherJob}) };\r\n    // if(predictProfile!=null && predictProfile.motherJob!=null){ initJobs.push({jobPerson:\"motherJob\", jobTitle:predictProfile.motherJob}) };\r\n    // console.log('initJobs')\r\n    // console.log(initJobs)\r\n    const initCount = []\r\n    if(predictProfile!=null && predictProfile.noChilren!=null){ initCount.push({countPerson:\"noChilren\", countVal:predictProfile.noChilren}) };\r\n    if(predictProfile!=null && predictProfile.noGirls!=null){ initCount.push({countPerson:\"noGirls\", countVal:predictProfile.noGirls}) };\r\n    if(predictProfile!=null && predictProfile.noBoys!=null){ initCount.push({countPerson:\"noBoys\", countVal:predictProfile.noBoys}) };\r\n    if(predictProfile!=null && predictProfile.noSiblings!=null){ initCount.push({countPerson:\"noSiblings\", countVal:predictProfile.noSiblings}) };\r\n    if(predictProfile!=null && predictProfile.noSisters!=null){ initCount.push({countPerson:\"noSisters\", countVal:predictProfile.noSisters}) };\r\n    if(predictProfile!=null && predictProfile.noBrothers!=null){ initCount.push({countPerson:\"noBrothers\", countVal:predictProfile.noBrothers}) };\r\n    // console.log('initCount')\r\n    // console.log(initCount)\r\n    const initFavs = []\r\n    if(predictProfile!=null && predictProfile.hobby!=null){ initFavs.push({favType:\"hobby\", favVal:predictProfile.hobby}) };\r\n    // if(predictProfile!=null && predictProfile.favBook!=null){ initFavs.push({favType:\"favBook\", favVal:predictProfile.favBook}) };\r\n    // if(predictProfile!=null && predictProfile.favFilm!=null){ initFavs.push({favType:\"favFilm\", favVal:predictProfile.favFilm}) };\r\n    // if(predictProfile!=null && predictProfile.favDish!=null){ initFavs.push({favType:\"favDish\", favVal:predictProfile.favDish}) };\r\n    // console.log('initFavs')\r\n    // console.log(initFavs)\r\n    const [initState, setInitState]=useState({name: initValues_name, jobs: [...initJobs], counts: [...initCount], gender:initValues_gender\r\n                , mariageStatus: initMarigage, favs: [...initFavs], age:initAge, resistance: initResist})\r\n\r\n  useEffect(()=>{\r\n      setState(initState)\r\n    }\r\n  ,[initState]);\r\n\r\n  let [jobButAbility, setJobBut]= useState(false)\r\n  let [countButAbility, setCountBut]= useState(false)\r\n  let [favButAbility, setFavBut]= useState(false)\r\n\r\n//   console.log('state is: ')\r\n//   console.log(state)\r\n\r\n  const addJob = (e) =>{\r\n    // console.log(state.jobs.length)\r\n    if(state.jobs.length<1){\r\n    setState((prevState) =>({...prevState,\r\n            jobs: [...prevState.jobs, {jobPerson:\"\", jobTitle:\"\"}],\r\n      }));\r\n    }else{\r\n        setJobBut(true)\r\n        openSnackError('امکان افزودن عنوان شغلی بیشتر نیست.')\r\n    }\r\n  }\r\n  const addCount = (e) =>{\r\n    // console.log(state.counts.length)\r\n    if(state.counts.length<6){\r\n        setState((prevState) =>({...prevState,\r\n                counts: [...prevState.counts, {countPerson:\"\", countVal:\"\"}],\r\n            }));\r\n    }else{\r\n        setCountBut(true)\r\n        openSnackError('امکان افزودن اطلاعات تعداد افراد بیشتر نیست.')\r\n    }\r\n}\r\nconst addFav = (e) =>{\r\n    // console.log(state.favs.length)\r\n    if(state.favs.length<1){\r\n        setState((prevState) =>({\r\n                ...prevState,\r\n                favs:[...prevState.favs, {favType:\"\", favVal:\"\"}]\r\n            }));\r\n    }else{\r\n        setFavBut(true)\r\n        openSnackError('امکان افزودن اطلاعات علاقه‌مندی بیشتر نیست.')\r\n    }\r\n}\r\n//   console.log(state)\r\n  const handleSelectChange = (e, data) =>{\r\n    if(data.name.startsWith('job')){\r\n        let jobs = [...state.jobs]\r\n        jobs[data[\"data-id\"]][\"jobPerson\"] = data.value\r\n        setState((prevState) => ({...prevState, jobs}))\r\n    }\r\n    if(data.name.startsWith('count')){\r\n        let counts = [...state.counts]\r\n        counts[data[\"data-id\"]][\"countPerson\"] = data.value\r\n        setState((prevState) => ({...prevState, counts}))\r\n    }\r\n    if(data.name==\"mariageSelect\"){\r\n        setState((prevState) => ({...prevState, mariageStatus: data.value}))\r\n    }\r\n    if(data.name.startsWith('fav')){\r\n        let favs = [...state.favs]\r\n        favs[data[\"data-id\"]][\"favType\"] = data.value\r\n        setState((prevState) => ({...prevState, favs}))\r\n    }\r\n    // console.log('state: ')\r\n    // console.log(state)\r\n  }\r\n  const handleChange = (e) =>{\r\n    // console.log('e.target.classList: ')\r\n    // console.log(e.target.classList)\r\n    // console.log('e.target.value: ')\r\n    // console.log(e.target.value)\r\n    // console.log('e: ')\r\n    // console.log(e)\r\n      if([\"jobTitle\"].includes(e.target.classList[0])){\r\n          let jobs = [...state.jobs]\r\n          let counts = [...state.counts]\r\n          let favs = [...state.favs]\r\n          jobs[e.target.dataset.id][e.target.classList[0]] = e.target.value\r\n          setState({jobs, name:state.name, counts, gender:state.gender, mariageStatus: state.mariageStatus, favs,\r\n             age:state.age, resistance: state.resistance})\r\n        //   console.log(state)\r\n      }else if([\"countVal\"].includes(e.target.classList[0])){\r\n        let jobs = [...state.jobs]\r\n        let counts = [...state.counts]\r\n        let favs = [...state.favs]\r\n        counts[e.target.dataset.id][e.target.classList[0]] = e.target.value\r\n        setState({jobs, name:state.name, counts, gender:state.gender, mariageStatus: state.mariageStatus, favs,\r\n            age:state.age, resistance: state.resistance})\r\n        // console.log(state)\r\n      }else if([\"favVal\"].includes(e.target.classList[0])){\r\n        let jobs = [...state.jobs]\r\n        let counts = [...state.counts]\r\n        let favs = [...state.favs]\r\n        favs[e.target.dataset.id][e.target.classList[0]] = e.target.value\r\n        setState({jobs, name:state.name, counts, gender:state.gender, mariageStatus: state.mariageStatus, favs,\r\n            age:state.age, resistance: state.resistance})\r\n        // console.log(state)\r\n      }else{\r\n          setState({...state,[e.target.name]: e.target.value})\r\n      }\r\n  }\r\n  const myHandleSubmit = async(e) => {\r\n    // console.log('in submit functions: ')\r\n    // console.log('chatId: ')\r\n    // console.log(chatId)\r\n    // console.log('name: ')\r\n    // console.log(state.name)\r\n    // console.log('e in sumit')\r\n    // console.log(e.nativeEvent.submitter.name)//nativeEvent\r\n    if(e.nativeEvent.submitter.name==\"addJobs\" || e.nativeEvent.submitter.name==\"addCounts\" || e.nativeEvent.submitter.name==\"addFavs\")\r\n    {\r\n        e.preventDefault()\r\n    }else{\r\n        let mutate_variables = {chatId: chatId, name: state.name, profilePoint:0}\r\n        for (let jobItm of state.jobs) {\r\n            if(jobItm.jobTitle.trim()!=\"\"){mutate_variables[jobItm.jobPerson]=jobItm.jobTitle}\r\n        }\r\n        for (let countItm of state.counts) {\r\n            if(countItm.countVal!=\"\"){mutate_variables[countItm.countPerson]=Number(countItm.countVal)}\r\n        }\r\n        for (let favItm of state.favs) {\r\n            if(favItm.favVal.trim()!=\"\"){mutate_variables[favItm.favType]=favItm.favVal}\r\n        }\r\n        if(state.gender!=null && [\"fe\", \"ma\"].includes(state.gender)){\r\n            if(state.gender===\"ma\"){mutate_variables[\"gender\"]=true}\r\n            if(state.gender===\"fe\"){mutate_variables[\"gender\"]=false}\r\n        }\r\n        // console.log('state.age is: ')\r\n        // console.log(state.age)\r\n        if(state.mariageStatus!=null && (state.mariageStatus==\"single\" || state.mariageStatus==\"married\")){mutate_variables[\"mariageStatus\"]=state.mariageStatus}\r\n        if(state.age!=null && state.age!=0 && state.age!=\"\"){mutate_variables[\"age\"]=Number(state.age)}\r\n        if(state.resistance!=null && state.resistance.trim()!=\"\"){mutate_variables[\"resistance\"]=state.resistance}\r\n        const points = evaluateProfile(mutate_variables, receiverProfile)\r\n        mutate_variables[\"profilePoint\"] = points\r\n        // console.log('mutate_variables: ')\r\n        // console.log(mutate_variables)\r\n        // console.log('prediction points: ')\r\n        // console.log(points)\r\n        // console.log('profilePoint inside submit: ')\r\n        // console.log(profilePoint)\r\n        await client.mutate({\r\n            variables: mutate_variables,\r\n            mutation: REGISTER_PROFILE,\r\n        });\r\n        // console.log(mutate_variables)\r\n        var submitMess = \"حدس شما از پروفایل مخاطب با موفقیت ثبت شد.\"\r\n        if(Object.keys(mutate_variables).length==3 && mutate_variables[\"name\"].trim()==\"\"){\r\n            submitMess = 'تو که حدسی نزدی 😐'\r\n        }else if(points>profilePoint) {\r\n            var diff = points - profilePoint\r\n            if(points==maxProfileScore){\r\n                submitMess ='!گل کاشتی 🤩 همه رو درست گفتی'    \r\n            }else if(points>8){submitMess ='ایول خیلی خوب پیش رفتی 😄' }\r\n            else if(points>4){submitMess ='آفرین کارت خیلی خوب بود 😃' }\r\n            else{submitMess ='امتیازت بهتر شد. کارت خوبه 🙂' }   \r\n        }else if(points<profilePoint) {submitMess ='حدست بدتر شد! بیخیال دوباره سعی کن 😬' }\r\n        else if(points==profilePoint) {submitMess ='امتیازت فرقی نکرد 😜' }\r\n        // profilePoint = points\r\n        setprofilePoint(points);\r\n        // console.log('profilePoint after assigne: ')\r\n        // console.log(profilePoint)\r\n        \r\n        openSnackAsync(submitMess);\r\n    }\r\n}\r\nconst addButtonStyle={display:\"block\", margin:\"auto\", backgroundColor:\"#c6e8a6\", marginBottom:\"5px\"}\r\nconst jobPersonOptions = [\r\n    { key: 'job', value: 'job', text: 'خود فرد' },\r\n    // { key: 'spouseJob', value: 'spouseJob', text: 'همسر' },\r\n    // { key: 'motherJob', value: 'motherJob', text: 'مادر' },\r\n    // { key: 'fatherJob', value: 'fatherJob', text: 'پدر' },\r\n    ]\r\nconst countPersonOptions = [\r\n    { key: 'noSiblings', value: 'noSiblings', text: 'تعداد خواهربرادران' },\r\n    { key: 'noSisters', value: 'noSisters', text: 'تعداد خواهران' },\r\n    { key: 'noBrothers', value: 'noBrothers', text: 'تعداد برادران' },\r\n    { key: 'noChilren', value: 'noChilren', text: 'تعداد فرزندان' },\r\n    { key: 'noGirls', value: 'noGirls', text: 'تعداد فرزند دختر' },\r\n    { key: 'noBoys', value: 'noBoys', text: 'تعداد فرزند پسر' },\r\n    ]\r\nconst mariageOptions = [\r\n    { key: 'single', value: 'single', text: 'مجرد' },\r\n    { key: 'married', value: 'married', text: 'متاهل' },\r\n    { key: 'notknow', value: 'notknow', text: 'نمی‌دانم' },\r\n    ]\r\nconst favOptions = [\r\n    { key: 'hobby', value: 'hobby', text: 'علاقه‌مندی کلی' },\r\n    // { key: 'favBook', value: 'favBook', text: 'کتاب موردعلاقه' },\r\n    // { key: 'favDish', value: 'favDish', text: 'غذای موردعلاقه' },\r\n    // { key: 'favFilm', value: 'favFilm', text: 'فیلم موردعلاقه' },\r\n    ]\r\n  return (<div className=\"profile-receiver\">\r\n  <span className=\"profile-text-title\">پروفایل مخاطب</span>\r\n  <Form\r\n    onChange={handleChange}\r\n    onSubmit={myHandleSubmit}\r\n    //loading = {registerLoading}\r\n  >\r\n    <Form.Input\r\n      name=\"name\"\r\n      label=\"نام\"\r\n      placeholder=\"name\"\r\n      //onChange={onChange}\r\n      value={state.name}\r\n      className=\"form-field\"\r\n    />\r\n    <Form.Group inline className=\"form-field\">\r\n        <label>جنسیت:</label>\r\n        <input\r\n        value='ma' \r\n        name=\"gender\"\r\n        type=\"radio\"\r\n        checked={state.gender==='ma'}\r\n        onChange={handleChange}\r\n        className=\"genderProfile\"\r\n        />\r\n        مرد\r\n        <input\r\n        type=\"radio\"\r\n        value='fe'\r\n        name=\"gender\"\r\n        checked={state.gender==='fe'}\r\n        onChange={handleChange}\r\n        className=\"genderProfile\"\r\n        />\r\n        زن\r\n        <input\r\n        type=\"radio\"\r\n        value='und'\r\n        name=\"gender\"\r\n        checked={state.gender==='und'}\r\n        onChange={handleChange}\r\n        className=\"genderProfile\"\r\n        />\r\n        نامشخص\r\n    </Form.Group>\r\n    <Form.Input\r\n      name=\"age\"\r\n      type=\"number\"\r\n      min=\"1\"\r\n      max=\"100\"\r\n      label=\"سن: \"\r\n      placeholder=\"age\"\r\n      value={state.age}\r\n      className=\"form-field inline\"\r\n    />\r\n    <Form.Select \r\n        label='وضعیت تاهل:  '\r\n        options={mariageOptions}\r\n        placeholder='انتخاب وضع تاهل'\r\n        name = \"mariageSelect\"\r\n        id = \"mariageSelect\"\r\n        className=\"mariageSelect selectProfile inline\"\r\n        value={state.mariageStatus}\r\n        onChange={handleSelectChange}\r\n    />\r\n    <Button name=\"addJobs\" style={addButtonStyle} onClick={addJob} disabled={jobButAbility}>اطلاعات شغل +</Button>\r\n    {\r\n        state.jobs.map((val, idx) => {\r\n            let jobPersId = `job-${idx}`, jobTitId = `jobtit-${idx}`\r\n            return( \r\n            <div key={idx} className=\"multiPartProfile-div\">\r\n                {/* <label>{`Job #${idx+1}`}</label> */}\r\n                <Form.Select \r\n                label='شخص شاغل'\r\n                options={jobPersonOptions}\r\n                placeholder='انتخاب شاغل'\r\n                name = {jobPersId}\r\n                data-id = {idx}\r\n                id = {jobPersId}\r\n                className=\"jobPerson\"\r\n                value={(state.jobs[idx].jobPerson!=\"\"? state.jobs[idx].jobPerson:\"\")}\r\n                onChange={handleSelectChange}\r\n                >\r\n                    {/* <option\r\n                    key={`jobself-${idx}`}\r\n                    value={state.jobs[idx].jobPerson}\r\n                    \r\n                    ></option> */}\r\n                    </Form.Select>\r\n                {/* <input\r\n                type=\"text\"\r\n                name = {jobPersId}\r\n                data-id = {idx}\r\n                id = {jobPersId}\r\n                className=\"jobPerson\"\r\n                value={state.jobs[idx].jobPerson}\r\n                /> */}\r\n                <div key={`inside-div-${idx}`}>\r\n                <label className=\"multiPartProfile-label\">عنوان شغل</label> \r\n                <input\r\n                label=\"عنوان شغل\"\r\n                type=\"text\"\r\n                name = {jobTitId}\r\n                data-id = {idx}\r\n                id = {jobTitId}\r\n                className=\"jobTitle\"\r\n                \r\n                value = {state.jobs[idx].jobTitle}\r\n                />\r\n                </div>\r\n            </div>\r\n            )\r\n        })\r\n    }\r\n    <Button name=\"addCounts\" style={addButtonStyle} onClick={addCount} disabled={countButAbility}>اطلاعات تعداد اعضای خانواده +</Button>\r\n    {\r\n        state.counts.map((val, idx) => {\r\n            let countPersId = `count-${idx}`, countTitId = `counttit-${idx}`\r\n            return( \r\n            <div key={idx} className=\"multiPartProfile-div\">\r\n                <Form.Select \r\n                label='عضو خانواده'\r\n                options={countPersonOptions}\r\n                placeholder='انتخاب عضو خانواده'\r\n                name = {countPersId}\r\n                data-id = {idx}\r\n                id = {countPersId}\r\n                className=\"countPerson\"\r\n                value={(state.counts[idx].countPerson!=\"\"? state.counts[idx].countPerson:\"\")}\r\n                onChange={handleSelectChange}\r\n                >\r\n                </Form.Select>\r\n                <div key={`inside-count-div-${idx}`}>\r\n                <label className=\"multiPartProfile-label\">تعداد</label> \r\n                <input\r\n                type=\"number\"\r\n                min=\"0\"\r\n                name = {countTitId}\r\n                data-id = {idx}\r\n                id = {countTitId}\r\n                className=\"countVal\"\r\n                value = {state.counts[idx].countVal}\r\n                />\r\n                </div>\r\n            </div>\r\n            )\r\n        })\r\n    }\r\n    <Button name=\"addFavs\" style={addButtonStyle} onClick={addFav} disabled={favButAbility}>اطلاعات علاقه‌مندی +</Button>\r\n    {\r\n        state.favs.map((val, idx) => {\r\n            let favTypeId = `fav-${idx}`, favValId = `favVal-${idx}`\r\n            return( \r\n            <div key={idx} className=\"multiPartProfile-div\">\r\n                <Form.Select \r\n                label='نوع علاقه‌مندی'\r\n                options={favOptions}\r\n                placeholder='انتخاب نوع علاقه‌مندی'\r\n                name = {favTypeId}\r\n                data-id = {idx}\r\n                id = {favTypeId}\r\n                className=\"favType\"\r\n                value={(state.favs[idx].favType!=\"\"? state.favs[idx].favType:\"\")}\r\n                onChange={handleSelectChange}\r\n                >\r\n                </Form.Select>\r\n                <div key={`inside-fav-div-${idx}`}>\r\n                <label className=\"multiPartProfile-label\">آیتم علاقه‌مندی</label> \r\n                <input\r\n                type=\"text\"\r\n                name = {favValId}\r\n                data-id = {idx}\r\n                id = {favValId}\r\n                className=\"favVal\"\r\n                value = {state.favs[idx].favVal}\r\n                />\r\n                </div>\r\n            </div>\r\n            )\r\n        })\r\n    }\r\n      <Form.Input\r\n          name=\"resistance\"\r\n          label=\"محل زندگی\"\r\n          placeholder=\"شهر یا استان\"\r\n          type=\"text\"\r\n          value={state.resistance}\r\n          className=\"form-field\"\r\n      />\r\n      <Form.Button className=\"form-field\" name=\"mianSubmit\" primary>\r\n      ثبت پروفایل\r\n      </Form.Button>\r\n    </Form>\r\n  </div>);\r\n}\r\n\r\nexport default ProfileEditer;","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\pages\\chat\\CheckProfileItem.js",["228","229","230","231","232"],"// import fs from 'fs'\r\n// import path from 'path'\r\nconst provinceList = [\r\n'خراسان رضوی',\r\n'البرز',\r\n'فارس',\r\n'آذربایجان شرقی',\r\n'خوزستان',\r\n'آذربایجان غربی',\r\n'هرمزگان',\r\n'سیستان و بلوچستان',\r\n'مرکزی',\r\n'مازندران',\r\n'لرستان',\r\n'کردستان',\r\n'گلستان',\r\n'خراسان شمالی',\r\n'چهارمحال و بختیاری',\r\n'کهگیلویه و بویراحمد',\r\n'خراسان جنوبی',\r\n'تهران',\r\n'مشهد',\r\n'اصفهان',\r\n'کرج،البرز',\r\n'شیراز،فارس',\r\n'تبریز،آذربایجان شرقی',\r\n'اهواز،خوزستان',\r\n'قم',\r\n'کرمانشاه',\r\n'ارومیه،آذربایجان غربی',\r\n'رشت،گیلان',\r\n'کرمان',\r\n'بندرعباس،هرمزگان',\r\n'همدان',\r\n'زاهدان',\r\n'یزد',\r\n'اردبیل',\r\n'قزوین',\r\n'اراک،مرکزی',\r\n'بابل،مازندران',\r\n'زنجان',\r\n'خرم‌آباد،لرستان',\r\n'ساری،مازندران',\r\n'سنندج،کردستان',\r\n'گرگان،گلستان',\r\n'نیشابور،خراسان رضوی',\r\n'دزفول،خوزستان',\r\n'آمل،مازندران',\r\n'ملارد،تهران',\r\n'کاشان،اصفهان',\r\n'پاکدشت،تهران',\r\n'ری،تهران',\r\n'گنبد کاووس،گلستان',\r\n'خوی،آذربایجان غربی',\r\n'بروجرد،لرستان',\r\n'سیرجان،کرمان',\r\n'بجنورد،خراسان شمالی',\r\n'مرودشت،فارس',\r\n'شهرکرد،چهارمحال و بختیاری',\r\n'رفسنجان،کرمان',\r\n'قائم‌شهر،مازندران',\r\n'جیرفت،کرمان',\r\n'سبزوار،خراسان رضوی',\r\n'بوشهر',\r\n'آبادان،خوزستان',\r\n'ملایر،همدان',\r\n'ورامین،تهران',\r\n'ساوه،مرکزی',\r\n'چابهار،سیستان و بلوچستان',\r\n'تربت جام،خراسان رضوی',\r\n'کازرون،فارس',\r\n'مراغه،آذربایجان شرقی',\r\n'بیرجند،خراسان جنوبی',\r\n'ساوجبلاغ،البرز',\r\n'میناب،هرمزگان',\r\n'ایرانشهر،سیستان و بلوچستان',\r\n'مرند،آذربایجان شرقی',\r\n'مهاباد،آذربایجان غربی',\r\n'ایلام',\r\n'جهرم،فارس',\r\n'بم،کرمان',\r\n'سقز،کردستان',\r\n'تربت حیدریه،خراسان رضوی',\r\n'شاهرود،سمنان',\r\n'شوش،خوزستان',\r\n'ایذه،خوزستان',\r\n'سلماس،آذربایجان غربی',\r\n'سمنان',\r\n'مریوان،کردستان',\r\n'اندیمشک،خوزستان',\r\n'خرمشهر،خوزستان',\r\n'لاهیجان،گیلان',\r\n'تنکابن،مازندران',\r\n'زابل،سیستان و بلوچستان',\r\n'بندر لنگه،هرمزگان',\r\n'اهر،آذربایجان شرقی',\r\n'ابهر،زنجان',\r\n'قشم،هرمزگان',\r\n'بندر انزلی،گیلان',\r\n'شادگان،خوزستان',\r\n'بابلسر،مازندران',\r\n'آق‌قلا،گلستان',\r\n'کهگیلویه',\r\n'نقده،آذربایجان غربی',\r\n'دماوند،تهران',\r\n'چالوس،مازندران',\r\n'دامغان،سمنان',\r\n'فومن،گیلان',\r\n'آستارا،گیلان',\r\n'گلپایگان،اصفهان',\r\n'خلخال،اردبیل',\r\n'تکاب،آذربایجان غربی',\r\n'ترکمن،گلستان',\r\n'جویبار،مازندران',\r\n'گرمسار،سمنان',\r\n'رامسر،مازندران',\r\n'عسلویه،بوشهر',\r\n'اشنویه،آذربایجان غربی',\r\n'پلدختر،لرستان',\r\n'جلفا،آذربایجان شرقی',\r\n'پاوه،کرمانشاه',\r\n'فریدونکنار،مازندران',\r\n'گیلانغرب،کرمانشاه',\r\n'محلات،مرکزی',\r\n'دلیجان،مرکزی',\r\n'بافق،یزد',\r\n'اندیکا،خوزستان',\r\n'چالدران،اصفهان',\r\n'نطنز،اصفهان',\r\n'تفت،یزد',\r\n'املش،گیلان',\r\n'نائین،یزد',\r\n'اشتهارد،البرز',\r\n'جاجرم،خراسان شمالی',\r\n'بشاگرد،هرمزگان',\r\n'دیلم،بوشهر',\r\n'فیروزکوه،تهران',\r\n'خوانسار،اصفهان',\r\n'چادگان،اصفهان',\r\n'تفرش،مرکزی',\r\n'سوادکوه،مازندران',\r\n'قصرشیرین،کرمانشاه',\r\n'کلاردشت،مازندران',\r\n'سرعین،اردبیل',\r\n'طالقان،البرز'\r\n]\r\n\r\nconst jobLists = [\r\n  'نجار',\r\n  'معلم،مدرسه',\r\n  'بنا،ساختمان',\r\n  'نقاش',\r\n  'آشپز',\r\n  'آرایشگر،آرایشگاه',\r\n  'بازیگر',\r\n  'آهنگر',\r\n  'آتش‌نشان',\r\n  'دندانپزشک',\r\n  'دکتر،بیمارستان',\r\n  'خیاط،دوختن لباس',\r\n  'کشاورز',\r\n  'لوله کش',\r\n  'برق‌کار',\r\n  'پرستار،بیمارستان',\r\n  'ساعت‌ساز',\r\n  'طلا فروش',\r\n  'معمار',\r\n  'برنامه‌نویس،مهندس',\r\n  'نانوا',\r\n  'مکانیک،تعمیرگاه',\r\n  'پلیس',\r\n  'خانه‌دار',\r\n  'بیکار',\r\n  'محیطبان',\r\n  'نگهبان',\r\n  'مشاور بازرگانی',\r\n  'تاجر',\r\n  'خلبان',\r\n  'کارگر،ساختمان',\r\n  'شیرینی فروش',\r\n  'خبرنگار',\r\n  'عکاس',\r\n  'کارمند بانک،بانک',\r\n  'حسابدار',\r\n  'مشاور املاک،بنگاهی',\r\n  'پیک موتوری،پیک',\r\n  'استاد دانشگاه،استاد',\r\n  'مجسمه‌ساز',\r\n  'لوله‌کش',\r\n  'تعمیرکار لوازم خانگی،تعمیرکار',\r\n  'طراح وب،برنامه نویس',\r\n  'طراح داخلی،طراح',\r\n  'طراح لباس،طراح',\r\n  'کارگردان',\r\n  'گوینده',\r\n  'گرافیست',\r\n  'جراح',\r\n  'مربی ورزش،مربی',\r\n  'نماینده مجلس،نماینده،مجلس',\r\n  'منشی',\r\n  'صراف',\r\n  'کارخانه‌دار،کارخانه',\r\n  'مهماندار هواپیما،مهماندار',\r\n  'کارمند آژانس مسافربری،کارمند،آژانس مسافربری',\r\n  'قصاب،گوشت فروش',\r\n  'سیم کش ساختمان،سیمکش',\r\n  'برق کار',\r\n  'رفتگر،پاکبان',\r\n  'چشم پزشک،اپتومتر',\r\n  'بقال',\r\n  'دانش‌آموز، بیکار',\r\n]\r\n\r\nconst hobbyLists = [\r\n  'کتاب خواندن، کتاب',\r\n  'موسیقی گوش دادن،موسیقی',\r\n  'رقصیدن،رقص',\r\n  'ورزش کردن،ورزش',\r\n  'فیلم دیدن،فیلم',\r\n  'گلکاری کردن،گلکاری،باغبانی',\r\n  'قدم زدن، قدم،پیاده روی',\r\n  'خرید رفتن،خرید',\r\n  'ماهیگیری',\r\n  'کوهنوردی،کوهپیمایی',\r\n  'دوچرخه سواری',\r\n  'بازی کامپیوتری،بازی رایانه ای،بازی کامپیوتر،بازی رایانه، بازی با کامپیوتر،بازی با رایانه',\r\n  'عکاسی',\r\n  'غذا پختن،غذا',\r\n  'وبگردی،وب،اینترنت',\r\n  'نقاشی کشیدن،نقاشی',\r\n  'سفالگری،سفال',\r\n  'خیاطی',\r\n  'جدول حل کردن،جدول',\r\n  'طبیعت گردی،طبیعت',\r\n]\r\n\r\nfunction removeSpace(inpTxt) {\r\n    const str = inpTxt.split('');\r\n    str.forEach((item, index) => {\r\n     const charCode = item.charCodeAt(0);\r\n     if (charCode === 32 || charCode === 8204) {\r\n       str[index] = '';\r\n     }\r\n    });\r\n    inpTxt = str.join('');\r\n    return inpTxt;\r\n}\r\nexport const check = (realVal, predictVal, type)=>{\r\n  const prediction = removeSpace(predictVal)\r\n  if(removeSpace(realVal)==prediction){\r\n    return 1\r\n  }else{\r\n    // var filename = 'hobbiesList_quival.txt'\r\n    // if(type=='job'){filename='jobList_quival.txt'}\r\n    // var allElems =  fs.readFileSync(filename, 'utf8', function(error, data) {\r\n    //   if (error){ console.log(JSON.stringify(error)); }\r\n    // })\r\n    // var allElemsList = allElems.split(/\\r?\\n/);\r\n    var allElemsList = hobbyLists\r\n    if(type=='job'){allElemsList = jobLists}\r\n    else if(type=='resistance'){allElemsList = provinceList}\r\n    for (let i = 0; i < allElemsList.length; i++) {\r\n      var subElemes = allElemsList[i].split('،');\r\n      if(subElemes[0].trim()==realVal.trim()){\r\n        for (let j = 0; j < subElemes.length; j++) {\r\n          var elm = subElemes[j]\r\n          const noSpaceElm = removeSpace(elm)\r\n          if(noSpaceElm==prediction){return 1}\r\n          else if(prediction.includes(noSpaceElm)){return 1}\r\n        }\r\n        return 0;\r\n      }\r\n    }\r\n    return 0\r\n  }\r\n}\r\n\r\n","D:\\moved_files_from_document\\chatbot_training\\node_js_site\\nlp-chat-frontend\\src\\util\\CheckIsDirect.js",[],{"ruleId":"233","replacedBy":"234"},{"ruleId":"235","replacedBy":"236"},{"ruleId":"237","severity":1,"message":"238","line":10,"column":10,"nodeType":"239","messageId":"240","endLine":10,"endColumn":23},{"ruleId":"237","severity":1,"message":"241","line":12,"column":8,"nodeType":"239","messageId":"240","endLine":12,"endColumn":15},{"ruleId":"237","severity":1,"message":"242","line":1,"column":17,"nodeType":"239","messageId":"240","endLine":1,"endColumn":26},{"ruleId":"237","severity":1,"message":"243","line":1,"column":28,"nodeType":"239","messageId":"240","endLine":1,"endColumn":34},{"ruleId":"237","severity":1,"message":"244","line":1,"column":36,"nodeType":"239","messageId":"240","endLine":1,"endColumn":46},{"ruleId":"245","severity":1,"message":"246","line":124,"column":13,"nodeType":"247","endLine":124,"endColumn":57},{"ruleId":"245","severity":1,"message":"246","line":128,"column":13,"nodeType":"247","endLine":128,"endColumn":56},{"ruleId":"245","severity":1,"message":"246","line":132,"column":13,"nodeType":"247","endLine":132,"endColumn":57},{"ruleId":"245","severity":1,"message":"246","line":142,"column":13,"nodeType":"247","endLine":142,"endColumn":58},{"ruleId":"245","severity":1,"message":"246","line":146,"column":13,"nodeType":"247","endLine":146,"endColumn":59},{"ruleId":"245","severity":1,"message":"246","line":153,"column":13,"nodeType":"247","endLine":153,"endColumn":57},{"ruleId":"245","severity":1,"message":"246","line":157,"column":13,"nodeType":"247","endLine":157,"endColumn":56},{"ruleId":"237","severity":1,"message":"248","line":1,"column":10,"nodeType":"239","messageId":"240","endLine":1,"endColumn":18},{"ruleId":"237","severity":1,"message":"249","line":1,"column":20,"nodeType":"239","messageId":"240","endLine":1,"endColumn":31},{"ruleId":"237","severity":1,"message":"250","line":1,"column":33,"nodeType":"239","messageId":"240","endLine":1,"endColumn":36},{"ruleId":"237","severity":1,"message":"251","line":3,"column":8,"nodeType":"239","messageId":"240","endLine":3,"endColumn":14},{"ruleId":"237","severity":1,"message":"252","line":4,"column":10,"nodeType":"239","messageId":"240","endLine":4,"endColumn":18},{"ruleId":"237","severity":1,"message":"253","line":13,"column":9,"nodeType":"239","messageId":"240","endLine":13,"endColumn":16},{"ruleId":"237","severity":1,"message":"254","line":2,"column":8,"nodeType":"239","messageId":"240","endLine":2,"endColumn":14},{"ruleId":"237","severity":1,"message":"242","line":2,"column":17,"nodeType":"239","messageId":"240","endLine":2,"endColumn":26},{"ruleId":"237","severity":1,"message":"243","line":2,"column":28,"nodeType":"239","messageId":"240","endLine":2,"endColumn":34},{"ruleId":"237","severity":1,"message":"238","line":3,"column":10,"nodeType":"239","messageId":"240","endLine":3,"endColumn":23},{"ruleId":"237","severity":1,"message":"249","line":4,"column":42,"nodeType":"239","messageId":"240","endLine":4,"endColumn":53},{"ruleId":"237","severity":1,"message":"255","line":5,"column":8,"nodeType":"239","messageId":"240","endLine":5,"endColumn":25},{"ruleId":"256","severity":1,"message":"257","line":170,"column":40,"nodeType":"258","messageId":"259","endLine":170,"endColumn":42},{"ruleId":"256","severity":1,"message":"257","line":170,"column":87,"nodeType":"258","messageId":"259","endLine":170,"endColumn":89},{"ruleId":"237","severity":1,"message":"243","line":1,"column":28,"nodeType":"239","messageId":"240","endLine":1,"endColumn":34},{"ruleId":"237","severity":1,"message":"260","line":6,"column":10,"nodeType":"239","messageId":"240","endLine":6,"endColumn":23},{"ruleId":"237","severity":1,"message":"261","line":26,"column":7,"nodeType":"239","messageId":"240","endLine":26,"endColumn":25},{"ruleId":"237","severity":1,"message":"262","line":31,"column":7,"nodeType":"239","messageId":"240","endLine":31,"endColumn":31},{"ruleId":"237","severity":1,"message":"263","line":36,"column":7,"nodeType":"239","messageId":"240","endLine":36,"endColumn":31},{"ruleId":"237","severity":1,"message":"264","line":75,"column":10,"nodeType":"239","messageId":"240","endLine":75,"endColumn":22},{"ruleId":"237","severity":1,"message":"265","line":118,"column":7,"nodeType":"239","messageId":"240","endLine":118,"endColumn":18},{"ruleId":"266","severity":1,"message":"267","line":152,"column":18,"nodeType":"258","messageId":"268","endLine":152,"endColumn":19},{"ruleId":"237","severity":1,"message":"269","line":172,"column":10,"nodeType":"239","messageId":"240","endLine":172,"endColumn":19},{"ruleId":"237","severity":1,"message":"270","line":173,"column":9,"nodeType":"239","messageId":"240","endLine":173,"endColumn":31},{"ruleId":"237","severity":1,"message":"271","line":275,"column":25,"nodeType":"239","messageId":"240","endLine":275,"endColumn":32},{"ruleId":"237","severity":1,"message":"242","line":1,"column":17,"nodeType":"239","messageId":"240","endLine":1,"endColumn":26},{"ruleId":"237","severity":1,"message":"243","line":1,"column":28,"nodeType":"239","messageId":"240","endLine":1,"endColumn":34},{"ruleId":"237","severity":1,"message":"272","line":5,"column":25,"nodeType":"239","messageId":"240","endLine":5,"endColumn":35},{"ruleId":"237","severity":1,"message":"273","line":7,"column":8,"nodeType":"239","messageId":"240","endLine":7,"endColumn":24},{"ruleId":"237","severity":1,"message":"238","line":8,"column":10,"nodeType":"239","messageId":"240","endLine":8,"endColumn":23},{"ruleId":"237","severity":1,"message":"255","line":11,"column":8,"nodeType":"239","messageId":"240","endLine":11,"endColumn":25},{"ruleId":"237","severity":1,"message":"274","line":16,"column":10,"nodeType":"239","messageId":"240","endLine":16,"endColumn":17},{"ruleId":"237","severity":1,"message":"275","line":18,"column":8,"nodeType":"239","messageId":"240","endLine":18,"endColumn":13},{"ruleId":"237","severity":1,"message":"276","line":112,"column":7,"nodeType":"239","messageId":"240","endLine":112,"endColumn":24},{"ruleId":"256","severity":1,"message":"257","line":157,"column":30,"nodeType":"258","messageId":"259","endLine":157,"endColumn":32},{"ruleId":"256","severity":1,"message":"257","line":162,"column":45,"nodeType":"258","messageId":"259","endLine":162,"endColumn":47},{"ruleId":"256","severity":1,"message":"257","line":174,"column":22,"nodeType":"258","messageId":"259","endLine":174,"endColumn":24},{"ruleId":"256","severity":1,"message":"257","line":176,"column":22,"nodeType":"258","messageId":"259","endLine":176,"endColumn":24},{"ruleId":"237","severity":1,"message":"277","line":192,"column":10,"nodeType":"239","messageId":"240","endLine":192,"endColumn":25},{"ruleId":"237","severity":1,"message":"278","line":195,"column":10,"nodeType":"239","messageId":"240","endLine":195,"endColumn":25},{"ruleId":"237","severity":1,"message":"279","line":429,"column":10,"nodeType":"239","messageId":"240","endLine":429,"endColumn":22},{"ruleId":"237","severity":1,"message":"280","line":431,"column":10,"nodeType":"239","messageId":"240","endLine":431,"endColumn":18},{"ruleId":"237","severity":1,"message":"281","line":443,"column":10,"nodeType":"239","messageId":"240","endLine":443,"endColumn":24},{"ruleId":"237","severity":1,"message":"282","line":444,"column":10,"nodeType":"239","messageId":"240","endLine":444,"endColumn":25},{"ruleId":"237","severity":1,"message":"283","line":445,"column":10,"nodeType":"239","messageId":"240","endLine":445,"endColumn":19},{"ruleId":"237","severity":1,"message":"284","line":445,"column":21,"nodeType":"239","messageId":"240","endLine":445,"endColumn":30},{"ruleId":"256","severity":1,"message":"285","line":465,"column":40,"nodeType":"258","messageId":"259","endLine":465,"endColumn":42},{"ruleId":"237","severity":1,"message":"271","line":478,"column":17,"nodeType":"239","messageId":"240","endLine":478,"endColumn":24},{"ruleId":"237","severity":1,"message":"286","line":503,"column":9,"nodeType":"239","messageId":"240","endLine":503,"endColumn":28},{"ruleId":"237","severity":1,"message":"287","line":15,"column":7,"nodeType":"239","messageId":"240","endLine":15,"endColumn":22},{"ruleId":"237","severity":1,"message":"288","line":178,"column":9,"nodeType":"239","messageId":"240","endLine":178,"endColumn":13},{"ruleId":"237","severity":1,"message":"242","line":1,"column":17,"nodeType":"239","messageId":"240","endLine":1,"endColumn":26},{"ruleId":"237","severity":1,"message":"252","line":1,"column":28,"nodeType":"239","messageId":"240","endLine":1,"endColumn":36},{"ruleId":"237","severity":1,"message":"289","line":2,"column":10,"nodeType":"239","messageId":"240","endLine":2,"endColumn":14},{"ruleId":"237","severity":1,"message":"290","line":3,"column":10,"nodeType":"239","messageId":"240","endLine":3,"endColumn":14},{"ruleId":"237","severity":1,"message":"291","line":3,"column":16,"nodeType":"239","messageId":"240","endLine":3,"endColumn":27},{"ruleId":"237","severity":1,"message":"288","line":27,"column":11,"nodeType":"239","messageId":"240","endLine":27,"endColumn":15},{"ruleId":"237","severity":1,"message":"292","line":27,"column":17,"nodeType":"239","messageId":"240","endLine":27,"endColumn":23},{"ruleId":"237","severity":1,"message":"242","line":1,"column":17,"nodeType":"239","messageId":"240","endLine":1,"endColumn":26},{"ruleId":"237","severity":1,"message":"252","line":1,"column":28,"nodeType":"239","messageId":"240","endLine":1,"endColumn":36},{"ruleId":"237","severity":1,"message":"244","line":1,"column":38,"nodeType":"239","messageId":"240","endLine":1,"endColumn":48},{"ruleId":"237","severity":1,"message":"293","line":336,"column":7,"nodeType":"239","messageId":"240","endLine":336,"endColumn":12},{"ruleId":"237","severity":1,"message":"294","line":337,"column":7,"nodeType":"239","messageId":"240","endLine":337,"endColumn":14},{"ruleId":"237","severity":1,"message":"295","line":2,"column":15,"nodeType":"239","messageId":"240","endLine":2,"endColumn":20},{"ruleId":"237","severity":1,"message":"296","line":11,"column":7,"nodeType":"239","messageId":"240","endLine":11,"endColumn":16},{"ruleId":"256","severity":1,"message":"257","line":52,"column":34,"nodeType":"258","messageId":"259","endLine":52,"endColumn":36},{"ruleId":"256","severity":1,"message":"257","line":53,"column":46,"nodeType":"258","messageId":"259","endLine":53,"endColumn":48},{"ruleId":"256","severity":1,"message":"257","line":54,"column":68,"nodeType":"258","messageId":"259","endLine":54,"endColumn":70},{"ruleId":"256","severity":1,"message":"257","line":55,"column":83,"nodeType":"258","messageId":"259","endLine":55,"endColumn":85},{"ruleId":"256","severity":1,"message":"257","line":56,"column":64,"nodeType":"258","messageId":"259","endLine":56,"endColumn":66},{"ruleId":"256","severity":1,"message":"257","line":57,"column":55,"nodeType":"258","messageId":"259","endLine":57,"endColumn":57},{"ruleId":"256","severity":1,"message":"257","line":58,"column":58,"nodeType":"258","messageId":"259","endLine":58,"endColumn":60},{"ruleId":"256","severity":1,"message":"257","line":65,"column":67,"nodeType":"258","messageId":"259","endLine":65,"endColumn":69},{"ruleId":"256","severity":1,"message":"257","line":66,"column":64,"nodeType":"258","messageId":"259","endLine":66,"endColumn":66},{"ruleId":"256","severity":1,"message":"257","line":67,"column":67,"nodeType":"258","messageId":"259","endLine":67,"endColumn":69},{"ruleId":"256","severity":1,"message":"257","line":82,"column":92,"nodeType":"258","messageId":"259","endLine":82,"endColumn":94},{"ruleId":"237","severity":1,"message":"297","line":86,"column":11,"nodeType":"239","messageId":"240","endLine":86,"endColumn":21},{"ruleId":"256","severity":1,"message":"285","line":101,"column":68,"nodeType":"258","messageId":"259","endLine":101,"endColumn":70},{"ruleId":"256","severity":1,"message":"285","line":102,"column":60,"nodeType":"258","messageId":"259","endLine":102,"endColumn":62},{"ruleId":"256","severity":1,"message":"285","line":103,"column":63,"nodeType":"258","messageId":"259","endLine":103,"endColumn":65},{"ruleId":"256","severity":1,"message":"285","line":105,"column":46,"nodeType":"258","messageId":"259","endLine":105,"endColumn":48},{"ruleId":"256","severity":1,"message":"257","line":106,"column":29,"nodeType":"258","messageId":"259","endLine":106,"endColumn":31},{"ruleId":"256","severity":1,"message":"257","line":108,"column":35,"nodeType":"258","messageId":"259","endLine":108,"endColumn":37},{"ruleId":"256","severity":1,"message":"285","line":112,"column":65,"nodeType":"258","messageId":"259","endLine":112,"endColumn":67},{"ruleId":"237","severity":1,"message":"298","line":137,"column":23,"nodeType":"239","messageId":"240","endLine":137,"endColumn":35},{"ruleId":"256","severity":1,"message":"257","line":198,"column":17,"nodeType":"258","messageId":"259","endLine":198,"endColumn":19},{"ruleId":"256","severity":1,"message":"257","line":252,"column":36,"nodeType":"258","messageId":"259","endLine":252,"endColumn":38},{"ruleId":"256","severity":1,"message":"257","line":252,"column":79,"nodeType":"258","messageId":"259","endLine":252,"endColumn":81},{"ruleId":"256","severity":1,"message":"257","line":252,"column":124,"nodeType":"258","messageId":"259","endLine":252,"endColumn":126},{"ruleId":"256","severity":1,"message":"285","line":258,"column":38,"nodeType":"258","messageId":"259","endLine":258,"endColumn":40},{"ruleId":"256","severity":1,"message":"285","line":261,"column":33,"nodeType":"258","messageId":"259","endLine":261,"endColumn":35},{"ruleId":"256","severity":1,"message":"285","line":264,"column":36,"nodeType":"258","messageId":"259","endLine":264,"endColumn":38},{"ruleId":"256","severity":1,"message":"257","line":272,"column":61,"nodeType":"258","messageId":"259","endLine":272,"endColumn":63},{"ruleId":"256","severity":1,"message":"257","line":272,"column":94,"nodeType":"258","messageId":"259","endLine":272,"endColumn":96},{"ruleId":"256","severity":1,"message":"285","line":273,"column":40,"nodeType":"258","messageId":"259","endLine":273,"endColumn":42},{"ruleId":"256","severity":1,"message":"285","line":273,"column":56,"nodeType":"258","messageId":"259","endLine":273,"endColumn":58},{"ruleId":"256","severity":1,"message":"285","line":274,"column":61,"nodeType":"258","messageId":"259","endLine":274,"endColumn":63},{"ruleId":"256","severity":1,"message":"257","line":289,"column":48,"nodeType":"258","messageId":"259","endLine":289,"endColumn":50},{"ruleId":"256","severity":1,"message":"257","line":289,"column":86,"nodeType":"258","messageId":"259","endLine":289,"endColumn":88},{"ruleId":"237","severity":1,"message":"299","line":292,"column":17,"nodeType":"239","messageId":"240","endLine":292,"endColumn":21},{"ruleId":"256","severity":1,"message":"257","line":293,"column":22,"nodeType":"258","messageId":"259","endLine":293,"endColumn":24},{"ruleId":"256","severity":1,"message":"257","line":299,"column":23,"nodeType":"258","messageId":"259","endLine":299,"endColumn":25},{"ruleId":"256","severity":1,"message":"285","line":414,"column":50,"nodeType":"258","messageId":"259","endLine":414,"endColumn":52},{"ruleId":"256","severity":1,"message":"285","line":462,"column":54,"nodeType":"258","messageId":"259","endLine":462,"endColumn":56},{"ruleId":"256","severity":1,"message":"285","line":496,"column":48,"nodeType":"258","messageId":"259","endLine":496,"endColumn":50},{"ruleId":"256","severity":1,"message":"257","line":250,"column":26,"nodeType":"258","messageId":"259","endLine":250,"endColumn":28},{"ruleId":"256","severity":1,"message":"257","line":260,"column":12,"nodeType":"258","messageId":"259","endLine":260,"endColumn":14},{"ruleId":"256","severity":1,"message":"257","line":261,"column":17,"nodeType":"258","messageId":"259","endLine":261,"endColumn":19},{"ruleId":"256","severity":1,"message":"257","line":264,"column":29,"nodeType":"258","messageId":"259","endLine":264,"endColumn":31},{"ruleId":"256","severity":1,"message":"257","line":268,"column":24,"nodeType":"258","messageId":"259","endLine":268,"endColumn":26},"no-native-reassign",["300"],"no-negated-in-lhs",["301"],"no-unused-vars","'ErrorBoundary' is defined but never used.","Identifier","unusedVar","'MenuBar' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'useContext' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useQuery' is defined but never used.","'useMutation' is defined but never used.","'gql' is defined but never used.","'moment' is defined but never used.","'useState' is defined but never used.","'onLogin' is assigned a value but never used.","'Button' is defined but never used.","'ErrorFallBackPage' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'animateScroll' is defined but never used.","'SEND_CHAT_REQUESTS' is assigned a value but never used.","'GET_CHAT_REQUESTS_ANSWER' is assigned a value but never used.","'SEND_CHAT_REQUEST_ANSWER' is assigned a value but never used.","'RequestModal' is defined but never used.","'sentRequest' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'modalOpen' is assigned a value but never used.","'closeModalWithCallBack' is assigned a value but never used.","'loading' is assigned a value but never used.","'Transition' is defined but never used.","'isDirectQuestion' is defined but never used.","'useForm' is defined but never used.","'axios' is defined but never used.","'GET_MESSAGES_INIT' is assigned a value but never used.","'ReceiverProfile' is defined but never used.","'registerProfile' is assigned a value but never used.","'setIsDirectQ' is assigned a value but never used.","'exitChat' is assigned a value but never used.","'predictProfile' is assigned a value but never used.","'receiverProfile' is assigned a value but never used.","'is_direct' is assigned a value but never used.","'setDirect' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'openErrorSnackAsync' is assigned a value but never used.","'ChatProfileForm' is defined but never used.","'user' is assigned a value but never used.","'Menu' is defined but never used.","'Link' is defined but never used.","'useLocation' is defined but never used.","'logout' is assigned a value but never used.","'error' is assigned a value but never used.","'isValid' is assigned a value but never used.","'Input' is defined but never used.","'__dirname' is assigned a value but never used.","'pointQuery' is assigned a value but never used.","'setInitState' is assigned a value but never used.","'diff' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]